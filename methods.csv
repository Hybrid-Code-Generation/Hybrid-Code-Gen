FilePath,Package,Class,Method Name,Return Type,Parameters,Function Body,Throws,Modifiers,Generics
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\Main.java,,Main,main,void,String[] args,"{

        if (args.length == 1 && args[0].equals(""--help"")) {
            System.out.println(""Usage: java -jar PA1.jar"");
            System.out.println(""Usage: java -jar PA1.jar [file]"");
            System.out.println(""Usage: java -jar PA1.jar [rows] [cols]"");
            System.exit(0);
        }

        Game g = null;

        try {
            if (args.length == 0) {
                int rows = 8;
                int cols = 8;

                g = new Game(rows, cols);
            } else if (args.length == 1) {
                try {
                    Deserializer deserializer = new Deserializer(args[0]);
                    g = deserializer.parseGame();
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                    throw e;
                }
            } else if (args.length == 2) {
                int rows = Integer.parseInt(args[0]);
                int cols = Integer.parseInt(args[1]);

                g = new Game(rows, cols);
            }
        } catch (final Throwable tr) {
            tr.printStackTrace();
            System.err.println(""Unable to create game: "" + tr.getMessage());
            System.exit(1);
        }

        if (g == null) {
            System.err.println(""Unable to create game!"");
            System.exit(1);
        }

        System.out.println(""Enter \"":q\"" to quit the game."");
        System.out.println(""Enter \"":u\"" to undo the last step."");
        System.out.println();

        try (BufferedReader reader = new BufferedReader(new InputStreamReader(System.in))) {
            do {
                g.display();
                System.out.print(""Enter coordinates for pipe (<col#><row#>): "");
                String input = reader.readLine();

                if (Arrays.stream(QUIT_RESPONSES).anyMatch(it -> it.equalsIgnoreCase(input))) {
                    break;
                }
                if (Arrays.stream(UNDO_RESPONSES).anyMatch(it -> it.equalsIgnoreCase(input))) {
                    if (!g.undoStep()) {
                        System.err.println(""No steps to undo!"");
                    }
                    continue;
                }

                char col = Character.toUpperCase(input.charAt(0));
                if (!Character.isAlphabetic(col)) {
                    System.err.println(""Cannot parse column!"");
                    continue;
                }

                String rowStr = input.codePoints()
                        .skip(1)
                        .takeWhile(Character::isDigit)
                        .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)
                        .toString();
                if (rowStr.isBlank()) {
                    System.err.println(""Cannot parse row!"");
                    continue;
                }
                int row = Integer.parseInt(rowStr);

                if (g.placePipe(row, col)) {
                    g.updateState();
                    if (g.hasWon()) {
                        System.out.println(""You win using "" + g.getNumOfSteps() + "" steps!"");
                        break;
                    } else if (g.hasLost()) {
                        System.out.println(""You lost!"");
                        break;
                    }
                } else {
                    System.err.println(""Cannot place pipe on that location!"");
                }
            } while (true);
        } catch (IOException e) {
            System.err.println(""Cannot read from console!"");
            e.printStackTrace();
            System.exit(1);
        }
    }",,public static,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\CellStack.java,,CellStack,push,void,FillableCell cell,"{
        // TODO
    }",,,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\CellStack.java,,CellStack,pop,FillableCell,,"{
        // TODO
    }",,,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\CellStack.java,,CellStack,getUndoCount,int,,"{
        // TODO
        return 0;
    }",,,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\CellStack.java,,CellStack,display,void,,"{
        System.out.println(""Undo Count: "" + count);
    }",,,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\DelayBar.java,,DelayBar,countdown,void,,"{
        // TODO
    }",,,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\DelayBar.java,,DelayBar,distance,int,,"{
        // TODO
        return 0;
    }",,,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\DelayBar.java,,DelayBar,display,void,,"{
        if (currentValue > 0) {
            System.out.print(""Rounds Countdown: "");
            System.out.print(StringUtils.createPadding(currentValue, '='));
            System.out.print(StringUtils.createPadding(initialValue - currentValue, ' '));
            System.out.print("" "" + currentValue);
            System.out.println();
        } else {
            System.out.println();
        }
    }",,,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\Game.java,,Game,fromString,Game,"int rows, int cols, int delay, String cellsRep, List<Pipe> pipes","{
        Cell[][] cells = Deserializer.parseString(rows, cols, cellsRep);

        return new Game(rows, cols, delay, cells, pipes);
    }",,static,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\Game.java,,Game,placePipe,boolean,"int row, char col","{
        // TODO
    }",,public,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\Game.java,,Game,skipPipe,void,,"{
        // TODO
    }",,public,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\Game.java,,Game,undoStep,boolean,,"{
        // TODO
    }",,public,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\Game.java,,Game,display,void,,"{
        map.display();
        System.out.println();
        pipeQueue.display();
        cellStack.display();
        System.out.println();
        delayBar.display();
    }",,public,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\Game.java,,Game,updateState,void,,"{
        // TODO
    }",,public,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\Game.java,,Game,hasWon,boolean,,"{
        // TODO
        return false;
    }",,public,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\Game.java,,Game,hasLost,boolean,,"{
        // TODO
        return false;
    }",,public,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\Game.java,,Game,getNumOfSteps,int,,"{
        // TODO
        return 0;
    }",,public,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\MapElement.java,,MapElement,toSingleChar,char,,,,,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\PipeQueue.java,,PipeQueue,peek,Pipe,,"{
        // TODO
    }",,,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\PipeQueue.java,,PipeQueue,consume,void,,"{
        // TODO
    }",,,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\PipeQueue.java,,PipeQueue,undo,void,Pipe pipe,"{
        // TODO
    }",,,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\PipeQueue.java,,PipeQueue,display,void,,"{
        System.out.print(""Next Pipes:  "");
        for (Pipe p : pipeQueue) {
            System.out.print(p.toSingleChar() + ""    "");
        }
        System.out.println();
    }",,,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\PipeQueue.java,,PipeQueue,generateNewPipe,Pipe,,"{
        // TODO
    }",,private static,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\map\Map.java,,Map,fromString,Map,"int rows, int cols, String cellsRep","{
        Cell[][] cells = Deserializer.parseString(rows, cols, cellsRep);

        return new Map(rows, cols, cells);
    }",,static,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\map\Map.java,,Map,tryPlacePipe,boolean,"Coordinate coord, Pipe pipe","{
        return tryPlacePipe(coord.row, coord.col, pipe);
    }",,public,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\map\Map.java,,Map,tryPlacePipe,boolean,"int row, int col, Pipe p","{
        // TODO
    }",,,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\map\Map.java,,Map,display,void,,"{
        final int padLength = Integer.valueOf(rows - 1).toString().length();

        Runnable printColumns = () -> {
            System.out.print(StringUtils.createPadding(padLength, ' '));
            System.out.print(' ');
            for (int i = 0; i < cols - 2; ++i) {
                System.out.print((char) ('A' + i));
            }
            System.out.println();
        };

        printColumns.run();

        for (int i = 0; i < rows; ++i) {
            if (i != 0 && i != rows - 1) {
                System.out.print(String.format(""%1$"" + padLength + ""s"", i));
            } else {
                System.out.print(StringUtils.createPadding(padLength, ' '));
            }

            Arrays.stream(cells[i]).forEachOrdered(elem -> System.out.print(elem.toSingleChar()));

            if (i != 0 && i != rows - 1) {
                System.out.print(i);
            }

            System.out.println();
        }

        printColumns.run();
    }",,public,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\map\Map.java,,Map,undo,void,Coordinate coord,"{
        // TODO
    }",,public,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\map\Map.java,,Map,fillBeginTile,void,,"{
        sourceCell.setFilled();
    }",,public,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\map\Map.java,,Map,fillTiles,void,int distance,"{
        // TODO
    }",,public,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\map\Map.java,,Map,checkPath,boolean,,"{
        // TODO
        return false;
    }",,public,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\map\Map.java,,Map,hasLost,boolean,,"{
        // TODO
        return false;
    }",,public,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\map\cells\Cell.java,,Cell,fromChar,Cell,"char c, Coordinate coord, TerminationCell.Type terminationType","{
        // TODO

        return null;
    }",,public static,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\map\cells\FillableCell.java,,FillableCell,getPipe,Optional<Pipe>,,"{
        // TODO
        return null;
    }",,public,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\map\cells\FillableCell.java,,FillableCell,toSingleChar,char,,"{
        // TODO
        return '\0';
    }",,@Override public,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\map\cells\FillableCell.java,,FillableCell,setPipe,void,Pipe pipe,"{
        this.pipe = pipe;
    }",,public,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\map\cells\TerminationCell.java,,TerminationCell,setFilled,void,,"{
        // TODO
    }",,public,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\map\cells\TerminationCell.java,,TerminationCell,toSingleChar,char,,"{
        // TODO
        return '\0';
    }",,@Override public,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\map\cells\Wall.java,,Wall,toSingleChar,char,,"{
        // TODO
        return '\0';
    }",,@Override public,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\pipes\Pipe.java,,Pipe,setFilled,void,,"{
        // TODO
    }",,public,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\pipes\Pipe.java,,Pipe,getFilled,boolean,,"{
        // TODO
        return false;
    }",,public,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\pipes\Pipe.java,,Pipe,getConnections,Direction[],,"{
        // TODO
    }",,public,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\pipes\Pipe.java,,Pipe,toSingleChar,char,,"{
        // TODO
    }",,@Override public,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\pipes\Pipe.java,,Pipe,fromString,Pipe,String rep,"{
        // TODO
    }",,public static,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\game\pipes\Pipe.java,,Pipe,getCharByState,char,boolean isFilled,"{
            // TODO
            return '\0';
        }",,,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\io\Deserializer.java,,Deserializer,parseGame,Game,,"{
        try (BufferedReader reader = new BufferedReader(new FileReader(path.toFile()))) {
            String line;

            int rows = 0;
            if ((line = getFirstNonEmptyLine(reader)) != null) {
                rows = Integer.parseInt(line);
            } else {
                throw new EOFException();
            }

            int cols = 0;
            if ((line = getFirstNonEmptyLine(reader)) != null) {
                cols = Integer.parseInt(line);
            } else {
                throw new EOFException();
            }

            int delay = 0;
            if ((line = getFirstNonEmptyLine(reader)) != null) {
                delay = Integer.parseInt(line);
            } else {
                throw new EOFException();
            }

            final ArrayList<String> mapRep = new ArrayList<String>();
            for (int r = 0; r < rows; ++r) {
                line = getFirstNonEmptyLine(reader);
                if (line == null) {
                    throw new EOFException();
                }

                mapRep.add(line);
            }
            final Cell[][] cells = parseString(rows, cols, String.join(""\n"", mapRep));

            List<Pipe> defaultPipes = null;
            String s = getFirstNonEmptyLine(reader);
            if (s != null) {
                defaultPipes = Arrays.stream(s.split("",""))
                        .map(Pipe::fromString)
                        .collect(Collectors.toList());
            }

            return new Game(rows, cols, delay, cells, defaultPipes);
        } catch (EOFException eofe) {
            System.err.println(""Unexpected EOF"");
            return null;
        } catch (IOException ioe) {
            ioe.printStackTrace();
            return null;
        }
    }",,public,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\io\Deserializer.java,,Deserializer,parseString,Cell[][],"int rows, int cols, String cellsRep","{
        Cell[][] cells = new Cell[rows][cols];
        for (int r = 0; r < rows; ++r) {
            for (int c = 0; c < cols; ++c) {
                Coordinate coord = new Coordinate(r, c);
                char ch = cellsRep.lines().skip(r).findFirst().orElseThrow().charAt(c);

                Cell cell;
                if (r == 0 || r == rows - 1 || c == 0 || c == cols - 1) {
                    cell = Cell.fromChar(ch, coord, TerminationCell.Type.SINK);
                } else {
                    cell = Cell.fromChar(ch, coord, TerminationCell.Type.SOURCE);
                }

                cells[r][c] = cell;
            }
        }

        return cells;
    }",,public static,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\io\Deserializer.java,,Deserializer,getFirstNonEmptyLine,String,BufferedReader br,"{
        do {

            String s = br.readLine();

            if (s == null) {
                return null;
            }
            if (s.isBlank() || s.startsWith(""#"")) {
                continue;
            }

            return s;
        } while (true);
    }",throws IOException,private,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\util\Coordinate.java,,Coordinate,equals,boolean,Object obj,"{
        if (obj == null) {
            return false;
        }
        if (!(obj instanceof Coordinate)) {
            return false;
        }

        return equals((Coordinate) obj);
    }",,@Override public,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\util\Coordinate.java,,Coordinate,equals,boolean,Coordinate other,"{
        return this.row == other.row && this.col == other.col;
    }",,public,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\util\Coordinate.java,,Coordinate,hashCode,int,,"{
        return Objects.hash(row, col);
    }",,@Override public,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\util\Coordinate.java,,Coordinate,add,Coordinate,Coordinate other,"{
        return new Coordinate(this.row + other.row, this.col + other.col);
    }",,public,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\util\Direction.java,,,getOpposite,Direction,,"{
        switch (this) {
            case UP:
                return DOWN;
            case DOWN:
                return UP;
            case LEFT:
                return RIGHT;
            case RIGHT:
                return LEFT;
            default:
                throw new IllegalStateException(""Unknown direction"");
        }
    }",,public,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\util\Direction.java,,,getOffset,Coordinate,,"{
        switch (this) {
            case UP:
                return new Coordinate(-1, 0);
            case DOWN:
                return new Coordinate(1, 0);
            case LEFT:
                return new Coordinate(0, -1);
            case RIGHT:
                return new Coordinate(0, 1);
            default:
                throw new IllegalStateException(""Unknown direction"");
        }
    }",,public,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\main\java\util\StringUtils.java,,StringUtils,createPadding,String,"int count, char ch","{
        return String.valueOf(ch).repeat(count);
    }",,public static,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\CellStackTest.java,,CellStackTest,setUp,void,,"{
        stack = new CellStack();
    }",,@BeforeEach,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\CellStackTest.java,,CellStackTest,tearDown,void,,"{
        stack = null;
    }",,@AfterEach,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\CellStackTest.java,,CellStackTest,givenEmptyStack_ifPop_returnNull,void,,"{
        final var poppedCell = assertDoesNotThrow(() -> stack.pop());

        assertNull(poppedCell);
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\CellStackTest.java,,CellStackTest,givenEmptyStack_ifPush_noThrow,void,,"{
        assertDoesNotThrow(() -> {
            stack.push(new FillableCell(new Coordinate(0, 0)));
            stack.push(new FillableCell(new Coordinate(0, 1)));
            stack.push(new FillableCell(new Coordinate(0, 2)));
        });
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\CellStackTest.java,,CellStackTest,givenStack_whenPop_returnElement,void,,"{
        final var coord = new Coordinate(0, 0);
        final var pipe = new Pipe(Pipe.Shape.CROSS);
        stack.push(new FillableCell(coord, pipe));

        final var poppedCell = stack.pop();
        assertNotNull(poppedCell);
        assertEquals(coord.row, poppedCell.coord.row);
        assertEquals(coord.col, poppedCell.coord.col);
        assertEquals(pipe, poppedCell.getPipe().orElse(null));
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\CellStackTest.java,,CellStackTest,givenEmptyStack_assertUndoCountEqualsZero,void,,"{
        assertEquals(0, stack.getUndoCount());
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\CellStackTest.java,,CellStackTest,givenEmptyStack_whenPush_undoCountDoesNotChange,void,,"{
        int originalCount = stack.getUndoCount();

        stack.push(new FillableCell(new Coordinate(0, 0)));

        assertEquals(originalCount, stack.getUndoCount());
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\CellStackTest.java,,CellStackTest,givenStack_whenPop_incUndoCount,void,,"{
        int originalCount = stack.getUndoCount();

        stack.push(new FillableCell(new Coordinate(0, 0)));
        stack.pop();

        assertEquals(originalCount + 1, stack.getUndoCount());
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\CellStackTest.java,,CellStackTest,givenEmptyStack_whenPop_undoCountDoesNotChange,void,,"{
        int originalCount = stack.getUndoCount();

        assertNull(stack.pop());

        assertEquals(originalCount, stack.getUndoCount());
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\CellStackTest.java,,CellStackTest,givenEmptyStack_whenPushThenPop_assertLIFOBehavior,void,,"{
        final var MAX_COUNT = Pipe.Shape.values().length;
        final var list = new ArrayList<FillableCell>();

        for (int i = 0; i < MAX_COUNT; ++i) {
            var c = new Coordinate(i, i);
            var p = new Pipe(Pipe.Shape.values()[i]);
            var cell = new FillableCell(c, p);
            stack.push(cell);
            list.add(cell);
        }

        FillableCell c;
        while ((c = stack.pop()) != null) {
            final var expected = list.remove(list.size() - 1);
            assertEquals(expected.coord.row, c.coord.row);
            assertEquals(expected.coord.col, c.coord.col);
            assertEquals(expected.getPipe(), c.getPipe());
        }
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\GameTest.java,,GameTest,givenGame_ifPipeCanBePlaced_stepCountIncreases,void,,"{
        final var cellRep =
                ""WWWW\n"" +
                        ""W.<W\n"" +
                        ""W..>\n"" +
                        ""WWWW"";
        final var initPipes = Collections.singletonList(new Pipe(Pipe.Shape.CROSS));
        final var map = assertDoesNotThrow(() -> Game.fromString(4, 4, 0, cellRep, initPipes));

        assertEquals(0, map.getNumOfSteps());
        assertTrue(map.placePipe(1, 'A'));
        assertEquals(1, map.getNumOfSteps());
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\GameTest.java,,GameTest,givenGame_ifSkipPipe_stepCountIncreases,void,,"{
        final var cellRep =
                ""WWWW\n"" +
                        ""W.<W\n"" +
                        ""W..>\n"" +
                        ""WWWW"";
        final var initPipes = Collections.singletonList(new Pipe(Pipe.Shape.CROSS));
        final var map = assertDoesNotThrow(() -> Game.fromString(4, 4, 0, cellRep, initPipes));

        assertEquals(0, map.getNumOfSteps());
        map.skipPipe();
        assertEquals(1, map.getNumOfSteps());
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\GameTest.java,,GameTest,givenGame_ifUndoPipe_stepCountIncreases,void,,"{
        final var cellRep =
                ""WWWW\n"" +
                        ""W.<W\n"" +
                        ""W..>\n"" +
                        ""WWWW"";
        final var initPipes = Collections.singletonList(new Pipe(Pipe.Shape.CROSS));
        final var map = assertDoesNotThrow(() -> Game.fromString(4, 4, 0, cellRep, initPipes));

        map.placePipe(1, 'A');
        int preNumOfSteps = map.getNumOfSteps();

        assertTrue(map.undoStep());
        assertEquals(preNumOfSteps + 1, map.getNumOfSteps());
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\GameTest.java,,GameTest,givenGame_ifPipeCannotBePlaced_stepCountDoesNotChange,void,,"{
        final var cellRep =
                ""WWWW\n"" +
                        ""W.<W\n"" +
                        ""W..>\n"" +
                        ""WWWW"";
        final var initPipes = Collections.singletonList(new Pipe(Pipe.Shape.CROSS));
        final var map = assertDoesNotThrow(() -> Game.fromString(4, 4, 0, cellRep, initPipes));

        assertEquals(0, map.getNumOfSteps());
        assertFalse(map.placePipe(1, 'B'));
        assertEquals(0, map.getNumOfSteps());
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\PipeQueueTest.java,,PipeQueueTest,setUp,void,,"{
        queue = new PipeQueue(INIT_PIPES);
    }",,@BeforeEach,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\PipeQueueTest.java,,PipeQueueTest,givenQueue_ifQueueContainsGivenPipes_thenSucceed,void,,"{
        INIT_PIPES.forEach(pipe -> {
            assertEquals(pipe, queue.peek());
            queue.consume();
        });
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\PipeQueueTest.java,,PipeQueueTest,givenQueue_afterGivenPipes_assertNewPipesAreGenerated,void,,"{
        for (int i = 0; i < INIT_PIPES.size(); ++i) {
            queue.consume();
        }

        var pipe = assertDoesNotThrow(() -> queue.peek());
        assertNotNull(pipe);
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\PipeQueueTest.java,,PipeQueueTest,givenQueue_ifQueuePeekIsImmutable_thenSucceed,void,,"{
        assertEquals(INIT_PIPES.get(0), queue.peek());
        assertEquals(INIT_PIPES.get(0), queue.peek());
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\PipeQueueTest.java,,PipeQueueTest,givenQueue_ifQueueConsumeIsMutable_thenSucceed,void,,"{
        final var firstElement = queue.peek();
        queue.consume();

        assertNotEquals(firstElement, queue.peek());
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\PipeQueueTest.java,,PipeQueueTest,givenQueue_ifQueueUndoAddsElementAtFront_thenSucceed,void,,"{
        final var elemToAdd = new Pipe(Pipe.Shape.BOTTOM_LEFT);

        queue.undo(elemToAdd);

        assertEquals(elemToAdd, queue.peek());
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\PipeQueueTest.java,,PipeQueueTest,tearDown,void,,"{
        queue = null;
    }",,@AfterEach,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\map\MapTest.java,,MapTest,givenFirstPipe_ifCanFillPipeFromCorrectDirection_thenSuccess,void,,"{
        final var cellRep =
                ""WWWW\n"" +
                        ""W.<W\n"" +
                        ""W..>\n"" +
                        ""WWWW"";
        final var map = assertDoesNotThrow(() -> Map.fromString(4, 4, cellRep));

        assertTrue(() -> map.tryPlacePipe(1, 1, new Pipe(Pipe.Shape.BOTTOM_RIGHT)));

        map.fillTiles(2);

        assertTrue(() -> map.cells[1][1] instanceof FillableCell);

        final var cell = (FillableCell) map.cells[1][1];
        assertTrue(() -> cell.getPipe().isPresent() && cell.getPipe().get().getFilled());
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\map\MapTest.java,,MapTest,givenFirstPipe_ifCanFillPipeFromIncorrectDirection_thenFail,void,,"{
        final var cellRep =
                ""WWWW\n"" +
                        ""W.<W\n"" +
                        ""W..>\n"" +
                        ""WWWW"";
        final var map = assertDoesNotThrow(() -> Map.fromString(4, 4, cellRep));

        assertTrue(() -> map.tryPlacePipe(1, 1, new Pipe(Pipe.Shape.VERTICAL)));

        map.fillTiles(2);

        assertTrue(() -> map.cells[1][1] instanceof FillableCell);

        final var cell = (FillableCell) map.cells[1][1];
        assertFalse(() -> cell.getPipe().isPresent() && cell.getPipe().get().getFilled());
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\map\MapTest.java,,MapTest,givenSubsequentPipe_ifCanFillPipeFromCorrectDirection_thenSuccess,void,,"{
        final var cellRep =
                ""WWWW\n"" +
                        ""W.<W\n"" +
                        ""W..>\n"" +
                        ""WWWW"";
        final var map = assertDoesNotThrow(() -> Map.fromString(4, 4, cellRep));

        assertTrue(() -> map.tryPlacePipe(1, 1, new Pipe(Pipe.Shape.BOTTOM_RIGHT)));
        assertTrue(() -> map.tryPlacePipe(2, 1, new Pipe(Pipe.Shape.TOP_RIGHT)));

        map.fillTiles(2);

        assertTrue(() -> map.cells[1][1] instanceof FillableCell);
        final var firstCell = (FillableCell) map.cells[1][1];
        assertTrue(() -> firstCell.getPipe().isPresent() && firstCell.getPipe().get().getFilled());

        assertTrue(() -> map.cells[2][1] instanceof FillableCell);
        final var secondCell = (FillableCell) map.cells[2][1];
        assertTrue(() -> secondCell.getPipe().isPresent() && secondCell.getPipe().get().getFilled());
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\map\MapTest.java,,MapTest,givenSubsequentPipe_ifCanFillPipeFromIncorrectDirection_thenFail,void,,"{
        final var cellRep =
                ""WWWW\n"" +
                        ""W.<W\n"" +
                        ""W..>\n"" +
                        ""WWWW"";
        final var map = assertDoesNotThrow(() -> Map.fromString(4, 4, cellRep));

        assertTrue(() -> map.tryPlacePipe(1, 1, new Pipe(Pipe.Shape.BOTTOM_RIGHT)));
        assertTrue(() -> map.tryPlacePipe(2, 1, new Pipe(Pipe.Shape.BOTTOM_RIGHT)));

        map.fillTiles(2);

        assertTrue(() -> map.cells[1][1] instanceof FillableCell);
        final var firstCell = (FillableCell) map.cells[1][1];
        assertTrue(() -> firstCell.getPipe().isPresent() && firstCell.getPipe().get().getFilled());

        assertTrue(() -> map.cells[2][1] instanceof FillableCell);
        final var secondCell = (FillableCell) map.cells[2][1];
        assertFalse(() -> secondCell.getPipe().isPresent() && secondCell.getPipe().get().getFilled());
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\map\cells\CellTest.java,,CellTest,givenUnknownCHar_whenCreateCellFromChar_assertNull,void,,"{
        cell = Cell.fromChar('A', DEFAULT_COORDINATE, null);

        assertNull(cell);
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\map\cells\CellTest.java,,CellTest,givenWallChar_whenCreateCellFromChar_assertCorrectType,void,,"{
        cell = Cell.fromChar('W', DEFAULT_COORDINATE, null);

        assertTrue(cell instanceof Wall);
        assertEquals(DEFAULT_COORDINATE, cell.coord);
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\map\cells\CellTest.java,,CellTest,givenWallChar_whenCreateCellFromCharWithTerminationType_assertCorrectType,void,,"{
        cell = Cell.fromChar('W', DEFAULT_COORDINATE, TerminationCell.Type.SOURCE);

        assertTrue(cell instanceof Wall);
        assertEquals(DEFAULT_COORDINATE, cell.coord);
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\map\cells\CellTest.java,,CellTest,givenCellChar_whenCreateCellFromChar_assertCorrectType,void,,"{
        cell = Cell.fromChar('.', DEFAULT_COORDINATE, null);

        assertTrue(cell instanceof FillableCell);
        assertEquals(DEFAULT_COORDINATE, cell.coord);
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\map\cells\CellTest.java,,CellTest,givenCellChar_whenCreateCellFromCharWithTerminationType_assertCorrectType,void,,"{
        cell = Cell.fromChar('.', DEFAULT_COORDINATE, TerminationCell.Type.SOURCE);

        assertTrue(cell instanceof FillableCell);
        assertEquals(DEFAULT_COORDINATE, cell.coord);
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\map\cells\CellTest.java,,CellTest,givenTerminationCellChar_whenCreateCellFromCharWithParams_assertCorrectType,void,,"{
        cell = Cell.fromChar('^', DEFAULT_COORDINATE, TerminationCell.Type.SOURCE);

        assertTrue(cell instanceof TerminationCell);
        assertEquals(DEFAULT_COORDINATE, cell.coord);
        assertEquals(Direction.UP, ((TerminationCell) cell).pointingTo);
        assertEquals(TerminationCell.Type.SOURCE, ((TerminationCell) cell).type);
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\map\cells\CellTest.java,,CellTest,givenTerminationCellChar_whenCreateCellFromCharWithoutParams_assertNull,void,,"{
        cell = Cell.fromChar('^', DEFAULT_COORDINATE, null);

        assertNull(cell);
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\map\cells\CellTest.java,,CellTest,tearDown,void,,"{
        cell = null;
    }",,@AfterEach,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\map\cells\FillableCellTest.java,,FillableCellTest,givenCell_assertCorrectCoordinates,void,,"{
        cell = new FillableCell(DEFAULT_COORD);

        assertEquals(DEFAULT_COORD, cell.coord);
        assertTrue(cell.getPipe().isEmpty());
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\map\cells\FillableCellTest.java,,FillableCellTest,givenFilledCell_assertCorrectCoordinatesAndPipe,void,,"{
        cell = new FillableCell(DEFAULT_COORD, DEFAULT_PIPE);

        assertEquals(DEFAULT_COORD, cell.coord);
        assertEquals(DEFAULT_PIPE, cell.getPipe().orElse(null));
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\map\cells\FillableCellTest.java,,FillableCellTest,givenCell_assertSingleCharRepresentation,void,,"{
        cell = new FillableCell(DEFAULT_COORD);

        assertEquals('.', cell.toSingleChar());
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\map\cells\FillableCellTest.java,,FillableCellTest,givenFilledCell_assertSingleCharRepresentation,void,,"{
        cell = new FillableCell(DEFAULT_COORD, DEFAULT_PIPE);

        assertEquals(DEFAULT_PIPE.toSingleChar(), cell.toSingleChar());
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\map\cells\FillableCellTest.java,,FillableCellTest,tearDown,void,,"{
        cell = null;
    }",,@AfterEach,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\map\cells\TerminationCellTest.java,,TerminationCellTest,givenCell_assertCorrectProperties,void,,"{
        cell = new TerminationCell(DEFAULT_COORD, DEFAULT_DIR, DEFAULT_TYPE);

        assertEquals(DEFAULT_COORD, cell.coord);
        assertEquals(DEFAULT_DIR, cell.pointingTo);
        assertEquals(DEFAULT_TYPE, cell.type);
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\map\cells\TerminationCellTest.java,,TerminationCellTest,givenCell_assertSingleCharRepresentation,void,,"{
        cell = new TerminationCell(DEFAULT_COORD, DEFAULT_DIR, DEFAULT_TYPE);

        assertEquals(PipePatterns.Unfilled.UP_ARROW, cell.toSingleChar());
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\map\cells\TerminationCellTest.java,,TerminationCellTest,givenFilledCell_assertSingleCharRepresentation,void,,"{
        cell = new TerminationCell(DEFAULT_COORD, DEFAULT_DIR, DEFAULT_TYPE);
        cell.setFilled();

        assertEquals(PipePatterns.Filled.UP_ARROW, cell.toSingleChar());
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\map\cells\TerminationCellTest.java,,TerminationCellTest,tearDown,void,,"{
        cell = null;
    }",,@AfterEach,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\map\cells\WallTest.java,,WallTest,setUp,void,,"{
        wall = new Wall(DEFAULT_COORDINATE);
    }",,@BeforeEach,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\map\cells\WallTest.java,,WallTest,givenWall_assertCorrectCoordinates,void,,"{
        assertEquals(DEFAULT_COORDINATE, wall.coord);
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\map\cells\WallTest.java,,WallTest,givenWall_assertCorrectSingleCharRepresentation,void,,"{
        assertEquals(PipePatterns.WALL, wall.toSingleChar());
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\game\map\cells\WallTest.java,,WallTest,tearDown,void,,"{
        wall = null;
    }",,@AfterEach,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\util\CoordinateTest.java,,CoordinateTest,setUp,void,,"{
        coord = new Coordinate(1, 2);
    }",,@BeforeEach,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\util\CoordinateTest.java,,CoordinateTest,givenCoord_ifRowAndColMatches_thenSucceed,void,,"{
        assertEquals(1, coord.row);
        assertEquals(2, coord.col);
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\util\CoordinateTest.java,,CoordinateTest,givenCoord_whenCompareSameCoords_assertEquals,void,,"{
        final Coordinate expected = new Coordinate(1, 2);

        assertTrue(coord.equals(expected));
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\util\CoordinateTest.java,,CoordinateTest,givenCoord_whenCompareSameCoordsAsObject_assertEquals,void,,"{
        final Coordinate expected = new Coordinate(1, 2);

        assertEquals(coord, expected);
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\util\CoordinateTest.java,,CoordinateTest,givenCoord_whenCompareCoordsWithDifferentRow_assertNotEquals,void,,"{
        final Coordinate unexpected = new Coordinate(2, 2);

        assertNotEquals(unexpected, coord);
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\util\CoordinateTest.java,,CoordinateTest,givenCoord_whenCompareCoordsWithDifferentCol_assertNotEquals,void,,"{
        final Coordinate unexpected = new Coordinate(1, 1);

        assertNotEquals(unexpected, coord);
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\util\CoordinateTest.java,,CoordinateTest,givenCoord_whenCompareCoordsWithDifferentRowAndCol_assertNotEquals,void,,"{
        final Coordinate unexpected = new Coordinate(2, 1);

        assertNotEquals(unexpected, coord);
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\util\CoordinateTest.java,,CoordinateTest,givenCoord_whenCompareWithNull_assertNotEquals,void,,"{
        assertNotEquals(null, coord);
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\util\CoordinateTest.java,,CoordinateTest,givenCoord_whenCompareWithNotCoord_assertNotEquals,void,,"{
        assertNotEquals(new Object(), coord);
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\util\CoordinateTest.java,,CoordinateTest,givenCoord_whenAddCoord_assertCorrect,void,,"{
        final int diffRow = 1;
        final int diffCol = 2;
        final Coordinate expected = new Coordinate(coord.row + diffRow, coord.col + diffCol);

        assertEquals(expected, coord.add(new Coordinate(diffRow, diffCol)));
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\util\CoordinateTest.java,,CoordinateTest,givenCoord_whenAddNegativeCoord_assertCorrect,void,,"{
        final int diffRow = -1;
        final int diffCol = -2;
        final Coordinate expected = new Coordinate(coord.row + diffRow, coord.col + diffCol);

        assertEquals(expected, coord.add(new Coordinate(diffRow, diffCol)));
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\util\CoordinateTest.java,,CoordinateTest,tearDown,void,,"{
        coord = null;
    }",,@AfterEach,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\util\DirectionTest.java,,DirectionTest,givenDirections_ifCorrectOppositeDirection_thenSucceed,void,,"{
        assertEquals(Direction.DOWN, Direction.UP.getOpposite());
        assertEquals(Direction.UP, Direction.DOWN.getOpposite());
        assertEquals(Direction.RIGHT, Direction.LEFT.getOpposite());
        assertEquals(Direction.LEFT, Direction.RIGHT.getOpposite());
    }",,@Test,
C:\repos\Hybrid-Code-Gen\javarepoparser\temp\JavaBench\projects\PA19\src\test\java\util\DirectionTest.java,,DirectionTest,givenDirections_ifCorrectCoordOffset_thenSucceed,void,,"{
        assertEquals(UP_OFFSET, Direction.UP.getOffset());
        assertEquals(DOWN_OFFSET, Direction.DOWN.getOffset());
        assertEquals(LEFT_OFFSET, Direction.LEFT.getOffset());
        assertEquals(RIGHT_OFFSET, Direction.RIGHT.getOffset());
    }",,@Test,
