The following are Java methods relevant to the user's query: 'Find the API where we're adding a new owner'. 

Use these methods to assist in code generation.


This is the 1 relevant method for the user query.
ResponseEntity<OwnerDto> addOwner(OwnerFieldsDto ownerFieldsDto) {\n        getRequest().ifPresent(request -> {\n            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {\n                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {\n                    String exampleString = "{ \"pets\" : [ { \"visits\" : [ { \"date\" : \"2013-01-01\", \"petId\" : 1, \"description\" : \"rabies shot\", \"id\" : 1 }, { \"date\" : \"2013-01-01\", \"petId\" : 1, \"description\" : \"rabies shot\", \"id\" : 1 } ], \"name\" : \"Leo\", \"id\" : 1, \"type\" : { \"name\" : \"cat\", \"id\" : 1 }, \"ownerId\" : 1, \"birthDate\" : \"2010-09-07\" }, { \"visits\" : [ { \"date\" : \"2013-01-01\", \"petId\" : 1, \"description\" : \"rabies shot\", \"id\" : 1 }, { \"date\" : \"2013-01-01\", \"petId\" : 1, \"description\" : \"rabies shot\", \"id\" : 1 } ], \"name\" : \"Leo\", \"id\" : 1, \"type\" : { \"name\" : \"cat\", \"id\" : 1 }, \"ownerId\" : 1, \"birthDate\" : \"2010-09-07\" } ], \"firstName\" : \"George\", \"lastName\" : \"Franklin\", \"address\" : \"110 W. Liberty St.\", \"city\" : \"Madison\", \"telephone\" : \"6085551023\", \"id\" : 1 }";\n                    ApiUtil.setExampleResponse(request, "application/json", exampleString);\n                    break;\n                }\n                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {\n                    String exampleString = "{ \"schemaValidationErrors\" : [ { \"message\" : \"[Path '/lastName'] Instance type (null) does not match any allowed primitive type (allowed: ['string'])\" }, { \"message\" : \"[Path '/lastName'] Instance type (null) does not match any allowed primitive type (allowed: ['string'])\" } ], \"detail\" : \"No static resource api/owner.\", \"type\" : \"http://localhost:9966/petclinic/api/owner\", \"title\" : \"NoResourceFoundException\", \"status\" : 500, \"timestamp\" : \"2024-11-23T13:59:21.3820407Z\" }";\n                    ApiUtil.setExampleResponse(request, "application/json", exampleString);\n                    break;\n                }\n                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {\n                    String exampleString = "{ \"schemaValidationErrors\" : [ { \"message\" : \"[Path '/lastName'] Instance type (null) does not match any allowed primitive type (allowed: ['string'])\" }, { \"message\" : \"[Path '/lastName'] Instance type (null) does not match any allowed primitive type (allowed: ['string'])\" } ], \"detail\" : \"No static resource api/owner.\", \"type\" : \"http://localhost:9966/petclinic/api/owner\", \"title\" : \"NoResourceFoundException\", \"status\" : 500, \"timestamp\" : \"2024-11-23T13:59:21.3820407Z\" }";\n                    ApiUtil.setExampleResponse(request, "application/json", exampleString);\n                    break;\n                }\n            }\n        });\n        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);\n\n    }

And these are the methods it calls or is called by:

ResponseEntity<OwnerDto> addOwner(OwnerFieldsDto ownerFieldsDto) {\n        getRequest().ifPresent(request -> {\n            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {\n                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {\n                    String exampleString = "{ \"pets\" : [ { \"visits\" : [ { \"date\" : \"2013-01-01\", \"petId\" : 1, \"description\" : \"rabies shot\", \"id\" : 1 }, { \"date\" : \"2013-01-01\", \"petId\" : 1, \"description\" : \"rabies shot\", \"id\" : 1 } ], \"name\" : \"Leo\", \"id\" : 1, \"type\" : { \"name\" : \"cat\", \"id\" : 1 }, \"ownerId\" : 1, \"birthDate\" : \"2010-09-07\" }, { \"visits\" : [ { \"date\" : \"2013-01-01\", \"petId\" : 1, \"description\" : \"rabies shot\", \"id\" : 1 }, { \"date\" : \"2013-01-01\", \"petId\" : 1, \"description\" : \"rabies shot\", \"id\" : 1 } ], \"name\" : \"Leo\", \"id\" : 1, \"type\" : { \"name\" : \"cat\", \"id\" : 1 }, \"ownerId\" : 1, \"birthDate\" : \"2010-09-07\" } ], \"firstName\" : \"George\", \"lastName\" : \"Franklin\", \"address\" : \"110 W. Liberty St.\", \"city\" : \"Madison\", \"telephone\" : \"6085551023\", \"id\" : 1 }";\n                    ApiUtil.setExampleResponse(request, "application/json", exampleString);\n                    break;\n                }\n                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {\n                    String exampleString = "{ \"schemaValidationErrors\" : [ { \"message\" : \"[Path '/lastName'] Instance type (null) does not match any allowed primitive type (allowed: ['string'])\" }, { \"message\" : \"[Path '/lastName'] Instance type (null) does not match any allowed primitive type (allowed: ['string'])\" } ], \"detail\" : \"No static resource api/owner.\", \"type\" : \"http://localhost:9966/petclinic/api/owner\", \"title\" : \"NoResourceFoundException\", \"status\" : 500, \"timestamp\" : \"2024-11-23T13:59:21.3820407Z\" }";\n                    ApiUtil.setExampleResponse(request, "application/json", exampleString);\n                    break;\n                }\n                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {\n                    String exampleString = "{ \"schemaValidationErrors\" : [ { \"message\" : \"[Path '/lastName'] Instance type (null) does not match any allowed primitive type (allowed: ['string'])\" }, { \"message\" : \"[Path '/lastName'] Instance type (null) does not match any allowed primitive type (allowed: ['string'])\" } ], \"detail\" : \"No static resource api/owner.\", \"type\" : \"http://localhost:9966/petclinic/api/owner\", \"title\" : \"NoResourceFoundException\", \"status\" : 500, \"timestamp\" : \"2024-11-23T13:59:21.3820407Z\" }";\n                    ApiUtil.setExampleResponse(request, "application/json", exampleString);\n                    break;\n                }\n            }\n        });\n        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);\n\n    }

ResponseEntity<OwnerDto> addOwner(OwnerFieldsDto ownerFieldsDto) {\n        getRequest().ifPresent(request -> {\n            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {\n                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {\n                    String exampleString = "{ \"pets\" : [ { \"visits\" : [ { \"date\" : \"2013-01-01\", \"petId\" : 1, \"description\" : \"rabies shot\", \"id\" : 1 }, { \"date\" : \"2013-01-01\", \"petId\" : 1, \"description\" : \"rabies shot\", \"id\" : 1 } ], \"name\" : \"Leo\", \"id\" : 1, \"type\" : { \"name\" : \"cat\", \"id\" : 1 }, \"ownerId\" : 1, \"birthDate\" : \"2010-09-07\" }, { \"visits\" : [ { \"date\" : \"2013-01-01\", \"petId\" : 1, \"description\" : \"rabies shot\", \"id\" : 1 }, { \"date\" : \"2013-01-01\", \"petId\" : 1, \"description\" : \"rabies shot\", \"id\" : 1 } ], \"name\" : \"Leo\", \"id\" : 1, \"type\" : { \"name\" : \"cat\", \"id\" : 1 }, \"ownerId\" : 1, \"birthDate\" : \"2010-09-07\" } ], \"firstName\" : \"George\", \"lastName\" : \"Franklin\", \"address\" : \"110 W. Liberty St.\", \"city\" : \"Madison\", \"telephone\" : \"6085551023\", \"id\" : 1 }";\n                    ApiUtil.setExampleResponse(request, "application/json", exampleString);\n                    break;\n                }\n                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {\n                    String exampleString = "{ \"schemaValidationErrors\" : [ { \"message\" : \"[Path '/lastName'] Instance type (null) does not match any allowed primitive type (allowed: ['string'])\" }, { \"message\" : \"[Path '/lastName'] Instance type (null) does not match any allowed primitive type (allowed: ['string'])\" } ], \"detail\" : \"No static resource api/owner.\", \"type\" : \"http://localhost:9966/petclinic/api/owner\", \"title\" : \"NoResourceFoundException\", \"status\" : 500, \"timestamp\" : \"2024-11-23T13:59:21.3820407Z\" }";\n                    ApiUtil.setExampleResponse(request, "application/json", exampleString);\n                    break;\n                }\n                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {\n                    String exampleString = "{ \"schemaValidationErrors\" : [ { \"message\" : \"[Path '/lastName'] Instance type (null) does not match any allowed primitive type (allowed: ['string'])\" }, { \"message\" : \"[Path '/lastName'] Instance type (null) does not match any allowed primitive type (allowed: ['string'])\" } ], \"detail\" : \"No static resource api/owner.\", \"type\" : \"http://localhost:9966/petclinic/api/owner\", \"title\" : \"NoResourceFoundException\", \"status\" : 500, \"timestamp\" : \"2024-11-23T13:59:21.3820407Z\" }";\n                    ApiUtil.setExampleResponse(request, "application/json", exampleString);\n                    break;\n                }\n            }\n        });\n        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);\n\n    }
This is the 2 relevant method for the user query.
ResponseEntity<OwnerDto> addOwner(OwnerFieldsDto ownerFieldsDto) {\n        HttpHeaders headers = new HttpHeaders();\n        Owner owner = ownerMapper.toOwner(ownerFieldsDto);\n        this.clinicService.saveOwner(owner);\n        OwnerDto ownerDto = ownerMapper.toOwnerDto(owner);\n        headers.setLocation(UriComponentsBuilder.newInstance()\n            .path("/api/owners/{id}").buildAndExpand(owner.getId()).toUri());\n        return new ResponseEntity<>(ownerDto, headers, HttpStatus.CREATED);\n    }

And these are the methods it calls or is called by:

ResponseEntity<OwnerDto> addOwner(OwnerFieldsDto ownerFieldsDto) {\n        HttpHeaders headers = new HttpHeaders();\n        Owner owner = ownerMapper.toOwner(ownerFieldsDto);\n        this.clinicService.saveOwner(owner);\n        OwnerDto ownerDto = ownerMapper.toOwnerDto(owner);\n        headers.setLocation(UriComponentsBuilder.newInstance()\n            .path("/api/owners/{id}").buildAndExpand(owner.getId()).toUri());\n        return new ResponseEntity<>(ownerDto, headers, HttpStatus.CREATED);\n    }

void saveOwner(Owner owner) {\n        ownerRepository.save(owner);\n\n    }

OwnerDto toOwnerDto(Owner owner)

Owner toOwner(OwnerFieldsDto ownerDto)

ResponseEntity<OwnerDto> addOwner(OwnerFieldsDto ownerFieldsDto) {\n        HttpHeaders headers = new HttpHeaders();\n        Owner owner = ownerMapper.toOwner(ownerFieldsDto);\n        this.clinicService.saveOwner(owner);\n        OwnerDto ownerDto = ownerMapper.toOwnerDto(owner);\n        headers.setLocation(UriComponentsBuilder.newInstance()\n            .path("/api/owners/{id}").buildAndExpand(owner.getId()).toUri());\n        return new ResponseEntity<>(ownerDto, headers, HttpStatus.CREATED);\n    }
This is the 3 relevant method for the user query.
void addPet(Pet pet) {\n        getPetsInternal().add(pet);\n        pet.setOwner(this);\n    }

And these are the methods it calls or is called by:

void addPet(Pet pet) {\n        getPetsInternal().add(pet);\n        pet.setOwner(this);\n    }

Set<Pet> getPetsInternal(nan) {\n        if (this.pets == null) {\n            this.pets = new HashSet<>();\n        }\n        return this.pets;\n    }

void setOwner(Owner owner) {\n        this.owner = owner;\n    }

void addPet(Pet pet) {\n        getPetsInternal().add(pet);\n        pet.setOwner(this);\n    }


Relevant Java Classes referenced in the methods:

class ApiUtil {\n    public static void setExampleResponse(NativeWebRequest req, String contentType, String example);\n}

class ClinicService {\n    Pet findPetById(int id) throws DataAccessException;\n    Collection<Pet> findAllPets() throws DataAccessException;\n    void savePet(Pet pet) throws DataAccessException;\n    void deletePet(Pet pet) throws DataAccessException;\n    Collection<Visit> findVisitsByPetId(int petId);\n    Visit findVisitById(int visitId) throws DataAccessException;\n    Collection<Visit> findAllVisits() throws DataAccessException;\n    void saveVisit(Visit visit) throws DataAccessException;\n    void deleteVisit(Visit visit) throws DataAccessException;\n    Vet findVetById(int id) throws DataAccessException;\n    Collection<Vet> findVets() throws DataAccessException;\n    Collection<Vet> findAllVets() throws DataAccessException;\n    void saveVet(Vet vet) throws DataAccessException;\n    void deleteVet(Vet vet) throws DataAccessException;\n    Owner findOwnerById(int id) throws DataAccessException;\n    Collection<Owner> findAllOwners() throws DataAccessException;\n    void saveOwner(Owner owner) throws DataAccessException;\n    void deleteOwner(Owner owner) throws DataAccessException;\n    Collection<Owner> findOwnerByLastName(String lastName) throws DataAccessException;\n    PetType findPetTypeById(int petTypeId);\n    Collection<PetType> findAllPetTypes() throws DataAccessException;\n    Collection<PetType> findPetTypes() throws DataAccessException;\n    void savePetType(PetType petType) throws DataAccessException;\n    void deletePetType(PetType petType) throws DataAccessException;\n    Specialty findSpecialtyById(int specialtyId);\n    Collection<Specialty> findAllSpecialties() throws DataAccessException;\n    void saveSpecialty(Specialty specialty) throws DataAccessException;\n    void deleteSpecialty(Specialty specialty) throws DataAccessException;\n    List<Specialty> findSpecialtiesByNameIn(Set<String> names) throws DataAccessException;\n}

class Owner {\n    @Column(name = "address")\n    @NotEmpty\n    private String address;\n    @Column(name = "city")\n    @NotEmpty\n    private String city;\n    @Column(name = "telephone")\n    @NotEmpty\n    @Digits(fraction = 0, integer = 10)\n    @Pattern(regexp = "^[0-9]{10}$", message = "Phone number must be exactly 10 digits")\n    private String telephone;\n    @OneToMany(cascade = CascadeType.ALL, mappedBy = "owner", fetch = FetchType.EAGER)\n    private Set<Pet> pets;\n    public String getAddress();\n    public void setAddress(String address);\n    public String getCity();\n    public void setCity(String city);\n    public String getTelephone();\n    public void setTelephone(String telephone);\n    protected Set<Pet> getPetsInternal();\n    protected void setPetsInternal(Set<Pet> pets);\n    public List<Pet> getPets();\n    public void setPets(List<Pet> pets);\n    public void addPet(Pet pet);\n    public Pet getPet(String name);\n    public Pet getPet(String name, boolean ignoreNew);\n    public Pet getPet(Integer petId);\n    @Override public String toString();\n}

class OwnerDto {\n    private String firstName;\n    private String lastName;\n    private String address;\n    private String city;\n    private String telephone;\n    private @Nullable Integer id;\n    @Valid\n  private List<PetDto> pets = new ArrayList<>();\n    public OwnerDto();\n    public OwnerDto(String firstName, String lastName, String address, String city, String telephone, List<PetDto> pets);\n    public OwnerDto firstName(String firstName);\n    @NotNull @Pattern(regexp = "^[\\p{L}]+([ '-][\\p{L}]+){0,2}$") @Size(min = 1, max = 30) @Schema(name = "firstName", example = "George", description = "The first name of the pet owner.", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty("firstName") public String getFirstName();\n    public void setFirstName(String firstName);\n    public OwnerDto lastName(String lastName);\n    @NotNull @Pattern(regexp = "^[\\p{L}]+([ '-][\\p{L}]+){0,2}\\.?$") @Size(min = 1, max = 30) @Schema(name = "lastName", example = "Franklin", description = "The last name of the pet owner.", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty("lastName") public String getLastName();\n    public void setLastName(String lastName);\n    public OwnerDto address(String address);\n    @NotNull @Size(min = 1, max = 255) @Schema(name = "address", example = "110 W. Liberty St.", description = "The postal address of the pet owner.", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty("address") public String getAddress();\n    public void setAddress(String address);\n    public OwnerDto city(String city);\n    @NotNull @Size(min = 1, max = 80) @Schema(name = "city", example = "Madison", description = "The city of the pet owner.", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty("city") public String getCity();\n    public void setCity(String city);\n    public OwnerDto telephone(String telephone);\n    @NotNull @Pattern(regexp = "^[0-9]*$") @Size(min = 1, max = 20) @Schema(name = "telephone", example = "6085551023", description = "The telephone number of the pet owner.", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty("telephone") public String getTelephone();\n    public void setTelephone(String telephone);\n    public OwnerDto id(Integer id);\n    @Min(0) @Schema(name = "id", accessMode = Schema.AccessMode.READ_ONLY, example = "1", description = "The ID of the pet owner.", requiredMode = Schema.RequiredMode.NOT_REQUIRED) @JsonProperty("id") public @Nullable Integer getId();\n    public void setId(Integer id);\n    public OwnerDto pets(List<PetDto> pets);\n    public OwnerDto addPetsItem(PetDto petsItem);\n    @Valid @Schema(name = "pets", accessMode = Schema.AccessMode.READ_ONLY, description = "The pets owned by this individual including any booked vet visits.", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty("pets") public List<PetDto> getPets();\n    public void setPets(List<PetDto> pets);\n    @Override public boolean equals(Object o);\n    @Override public int hashCode();\n    @Override public String toString();\n    private String toIndentedString(Object o);\n}

class OwnerFieldsDto {\n    private String firstName;\n    private String lastName;\n    private String address;\n    private String city;\n    private String telephone;\n    public OwnerFieldsDto();\n    public OwnerFieldsDto(String firstName, String lastName, String address, String city, String telephone);\n    public OwnerFieldsDto firstName(String firstName);\n    @NotNull @Pattern(regexp = "^[\\p{L}]+([ '-][\\p{L}]+){0,2}$") @Size(min = 1, max = 30) @Schema(name = "firstName", example = "George", description = "The first name of the pet owner.", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty("firstName") public String getFirstName();\n    public void setFirstName(String firstName);\n    public OwnerFieldsDto lastName(String lastName);\n    @NotNull @Pattern(regexp = "^[\\p{L}]+([ '-][\\p{L}]+){0,2}\\.?$") @Size(min = 1, max = 30) @Schema(name = "lastName", example = "Franklin", description = "The last name of the pet owner.", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty("lastName") public String getLastName();\n    public void setLastName(String lastName);\n    public OwnerFieldsDto address(String address);\n    @NotNull @Size(min = 1, max = 255) @Schema(name = "address", example = "110 W. Liberty St.", description = "The postal address of the pet owner.", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty("address") public String getAddress();\n    public void setAddress(String address);\n    public OwnerFieldsDto city(String city);\n    @NotNull @Size(min = 1, max = 80) @Schema(name = "city", example = "Madison", description = "The city of the pet owner.", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty("city") public String getCity();\n    public void setCity(String city);\n    public OwnerFieldsDto telephone(String telephone);\n    @NotNull @Pattern(regexp = "^[0-9]*$") @Size(min = 1, max = 20) @Schema(name = "telephone", example = "6085551023", description = "The telephone number of the pet owner.", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty("telephone") public String getTelephone();\n    public void setTelephone(String telephone);\n    @Override public boolean equals(Object o);\n    @Override public int hashCode();\n    @Override public String toString();\n    private String toIndentedString(Object o);\n}

class OwnerMapper {\n    OwnerDto toOwnerDto(Owner owner);\n    Owner toOwner(OwnerDto ownerDto);\n    @Mapping(target = "id", ignore = true) @Mapping(target = "pets", ignore = true) Owner toOwner(OwnerFieldsDto ownerDto);\n    List<OwnerDto> toOwnerDtoCollection(Collection<Owner> ownerCollection);\n    Collection<Owner> toOwners(Collection<OwnerDto> ownerDtos);\n}

class OwnerRepository {\n    Collection<Owner> findByLastName(String lastName) throws DataAccessException;\n    Owner findById(int id) throws DataAccessException;\n    void save(Owner owner) throws DataAccessException;\n    Collection<Owner> findAll() throws DataAccessException;\n    void delete(Owner owner) throws DataAccessException;\n}

class Pet {\n    @Column(name = "birth_date", columnDefinition = "DATE")\n    private LocalDate birthDate;\n    @ManyToOne(cascade = CascadeType.ALL)\n    @JoinColumn(name = "type_id")\n    private PetType type;\n    @ManyToOne\n    @JoinColumn(name = "owner_id")\n    private Owner owner;\n    @OneToMany(cascade = CascadeType.ALL, mappedBy = "pet", fetch = FetchType.EAGER)\n    private Set<Visit> visits;\n    public LocalDate getBirthDate();\n    public void setBirthDate(LocalDate birthDate);\n    public PetType getType();\n    public void setType(PetType type);\n    public Owner getOwner();\n    public void setOwner(Owner owner);\n    protected Set<Visit> getVisitsInternal();\n    protected void setVisitsInternal(Set<Visit> visits);\n    public List<Visit> getVisits();\n    public void setVisits(List<Visit> visits);\n    public void addVisit(Visit visit);\n}

