"FilePath","Package","Class","ClassBody"
"./javarepoparser/temp/spring-petclinic-rest\.mvn\wrapper\MavenWrapperDownloader.java","","MavenWrapperDownloader","{\n    private static final String WRAPPER_VERSION = ""0.5.6"";\n    private static final String DEFAULT_DOWNLOAD_URL = ""https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/""\n        + WRAPPER_VERSION + ""/maven-wrapper-"" + WRAPPER_VERSION + "".jar"";\n    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =\n            "".mvn/wrapper/maven-wrapper.properties"";\n    private static final String MAVEN_WRAPPER_JAR_PATH =\n            "".mvn/wrapper/maven-wrapper.jar"";\n    private static final String PROPERTY_NAME_WRAPPER_URL = ""wrapperUrl"";\n    public static void main(String args);\n    private static void downloadFileFromURL(String urlString, File destination) throws Exception;\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\PetClinicApplication.java","","PetClinicApplication","{\n    public static void main(String[] args);\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\config\SwaggerConfig.java","","SwaggerConfig","{\n    @Bean OpenAPI customOpenAPI();\n    private Contact swaggerContact();\n    private License swaggerLicense();\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\mapper\OwnerMapper.java","","OwnerMapper","{\n    OwnerDto toOwnerDto(Owner owner);\n    Owner toOwner(OwnerDto ownerDto);\n    @Mapping(target = ""id"", ignore = true) @Mapping(target = ""pets"", ignore = true) Owner toOwner(OwnerFieldsDto ownerDto);\n    List<OwnerDto> toOwnerDtoCollection(Collection<Owner> ownerCollection);\n    Collection<Owner> toOwners(Collection<OwnerDto> ownerDtos);\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\mapper\PetMapper.java","","PetMapper","{\n    @Mapping(source = ""owner.id"", target = ""ownerId"") PetDto toPetDto(Pet pet);\n    Collection<PetDto> toPetsDto(Collection<Pet> pets);\n    Collection<Pet> toPets(Collection<PetDto> pets);\n    @Mapping(source = ""ownerId"", target = ""owner.id"") Pet toPet(PetDto petDto);\n    @Mapping(target = ""id"", ignore = true) @Mapping(target = ""owner"", ignore = true) @Mapping(target = ""visits"", ignore = true) Pet toPet(PetFieldsDto petFieldsDto);\n    PetTypeDto toPetTypeDto(PetType petType);\n    PetType toPetType(PetTypeDto petTypeDto);\n    Collection<PetTypeDto> toPetTypeDtos(Collection<PetType> petTypes);\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\mapper\PetTypeMapper.java","","PetTypeMapper","{\n    PetType toPetType(PetTypeDto petTypeDto);\n    @Mapping(target = ""id"", ignore = true) PetType toPetType(PetTypeFieldsDto petTypeFieldsDto);\n    PetTypeDto toPetTypeDto(PetType petType);\n    PetTypeFieldsDto toPetTypeFieldsDto(PetType petType);\n    List<PetTypeDto> toPetTypeDtos(Collection<PetType> petTypes);\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\mapper\SpecialtyMapper.java","","SpecialtyMapper","{\n    Specialty toSpecialty(SpecialtyDto specialtyDto);\n    SpecialtyDto toSpecialtyDto(Specialty specialty);\n    Collection<SpecialtyDto> toSpecialtyDtos(Collection<Specialty> specialties);\n    Collection<Specialty> toSpecialtys(Collection<SpecialtyDto> specialties);\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\mapper\UserMapper.java","","UserMapper","{\n    @Mapping(target = ""id"", ignore = true) @Mapping(target = ""user"", ignore = true) Role toRole(RoleDto roleDto);\n    RoleDto toRoleDto(Role role);\n    Collection<RoleDto> toRoleDtos(Collection<Role> roles);\n    User toUser(UserDto userDto);\n    UserDto toUserDto(User user);\n    Collection<Role> toRoles(Collection<RoleDto> roleDtos);\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\mapper\VetMapper.java","","VetMapper","{\n    Vet toVet(VetDto vetDto);\n    @Mapping(target = ""id"", ignore = true) Vet toVet(VetFieldsDto vetFieldsDto);\n    VetDto toVetDto(Vet vet);\n    Collection<VetDto> toVetDtos(Collection<Vet> vets);\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\mapper\VisitMapper.java","","VisitMapper","{\n    @Mapping(source = ""petId"", target = ""pet.id"") Visit toVisit(VisitDto visitDto);\n    @Mapping(target = ""id"", ignore = true) @Mapping(target = ""pet"", ignore = true) Visit toVisit(VisitFieldsDto visitFieldsDto);\n    @Mapping(source = ""pet.id"", target = ""petId"") VisitDto toVisitDto(Visit visit);\n    Collection<VisitDto> toVisitsDto(Collection<Visit> visits);\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\model\BaseEntity.java","","BaseEntity","{\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    protected Integer id;\n    public Integer getId();\n    public void setId(Integer id);\n    @JsonIgnore public boolean isNew();\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\model\NamedEntity.java","","NamedEntity","{\n    @Column(name = ""name"")\n    @NotEmpty\n    private String name;\n    public String getName();\n    public void setName(String name);\n    @Override public String toString();\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\model\Owner.java","","Owner","{\n    @Column(name = ""address"")\n    @NotEmpty\n    private String address;\n    @Column(name = ""city"")\n    @NotEmpty\n    private String city;\n    @Column(name = ""telephone"")\n    @NotEmpty\n    @Digits(fraction = 0, integer = 10)\n    @Pattern(regexp = ""^[0-9]{10}$"", message = ""Phone number must be exactly 10 digits"")\n    private String telephone;\n    @OneToMany(cascade = CascadeType.ALL, mappedBy = ""owner"", fetch = FetchType.EAGER)\n    private Set<Pet> pets;\n    public String getAddress();\n    public void setAddress(String address);\n    public String getCity();\n    public void setCity(String city);\n    public String getTelephone();\n    public void setTelephone(String telephone);\n    protected Set<Pet> getPetsInternal();\n    protected void setPetsInternal(Set<Pet> pets);\n    public List<Pet> getPets();\n    public void setPets(List<Pet> pets);\n    public void addPet(Pet pet);\n    public Pet getPet(String name);\n    public Pet getPet(String name, boolean ignoreNew);\n    public Pet getPet(Integer petId);\n    @Override public String toString();\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\model\Person.java","","Person","{\n    @Column(name = ""first_name"")\n    @NotEmpty\n    protected String firstName;\n    @Column(name = ""last_name"")\n    @NotEmpty\n    protected String lastName;\n    public String getFirstName();\n    public void setFirstName(String firstName);\n    public String getLastName();\n    public void setLastName(String lastName);\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\model\Pet.java","","Pet","{\n    @Column(name = ""birth_date"", columnDefinition = ""DATE"")\n    private LocalDate birthDate;\n    @ManyToOne(cascade = CascadeType.ALL)\n    @JoinColumn(name = ""type_id"")\n    private PetType type;\n    @ManyToOne\n    @JoinColumn(name = ""owner_id"")\n    private Owner owner;\n    @OneToMany(cascade = CascadeType.ALL, mappedBy = ""pet"", fetch = FetchType.EAGER)\n    private Set<Visit> visits;\n    public LocalDate getBirthDate();\n    public void setBirthDate(LocalDate birthDate);\n    public PetType getType();\n    public void setType(PetType type);\n    public Owner getOwner();\n    public void setOwner(Owner owner);\n    protected Set<Visit> getVisitsInternal();\n    protected void setVisitsInternal(Set<Visit> visits);\n    public List<Visit> getVisits();\n    public void setVisits(List<Visit> visits);\n    public void addVisit(Visit visit);\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\model\PetType.java","","PetType","{\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\model\Role.java","","Role","{\n    @ManyToOne\n    @JoinColumn(name = ""username"")\n    @JsonIgnore\n    private User user;\n    @Column( name = ""role"")\n    private String name;\n    public User getUser();\n    public void setUser(User user);\n    public String getName();\n    public void setName(String name);\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\model\Specialty.java","","Specialty","{\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\model\User.java","","User","{\n    @Id\n    @Column(name = ""username"")\n    private String username;\n    @Column(name = ""password"")\n    private String password;\n    @Column(name = ""enabled"")\n    private Boolean enabled;\n    @OneToMany(cascade = CascadeType.ALL, mappedBy = ""user"", fetch = FetchType.EAGER)\n    private Set<Role> roles;\n    public String getUsername();\n    public void setUsername(String username);\n    public String getPassword();\n    public void setPassword(String password);\n    public Boolean getEnabled();\n    public void setEnabled(Boolean enabled);\n    public Set<Role> getRoles();\n    public void setRoles(Set<Role> roles);\n    @JsonIgnore public void addRole(String roleName);\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\model\Vet.java","","Vet","{\n    @ManyToMany(fetch = FetchType.EAGER)\n    @JoinTable(name = ""vet_specialties"", joinColumns = @JoinColumn(name = ""vet_id""),\n        inverseJoinColumns = @JoinColumn(name = ""specialty_id""))\n    private Set<Specialty> specialties;\n    @JsonIgnore protected Set<Specialty> getSpecialtiesInternal();\n    protected void setSpecialtiesInternal(Set<Specialty> specialties);\n    @XmlElement public List<Specialty> getSpecialties();\n    public void setSpecialties(List<Specialty> specialties);\n    @JsonIgnore public int getNrOfSpecialties();\n    public void addSpecialty(Specialty specialty);\n    public void clearSpecialties();\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\model\Visit.java","","Visit","{\n    @Column(name = ""visit_date"", columnDefinition = ""DATE"")\n    private LocalDate date;\n    @NotEmpty\n    @Column(name = ""description"")\n    private String description;\n    @ManyToOne\n    @JoinColumn(name = ""pet_id"")\n    private Pet pet;\n    public Visit();\n    public LocalDate getDate();\n    public void setDate(LocalDate date);\n    public String getDescription();\n    public void setDescription(String description);\n    public Pet getPet();\n    public void setPet(Pet pet);\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\repository\OwnerRepository.java","","OwnerRepository","{\n    Collection<Owner> findByLastName(String lastName) throws DataAccessException;\n    Owner findById(int id) throws DataAccessException;\n    void save(Owner owner) throws DataAccessException;\n    Collection<Owner> findAll() throws DataAccessException;\n    void delete(Owner owner) throws DataAccessException;\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\repository\PetRepository.java","","PetRepository","{\n    List<PetType> findPetTypes() throws DataAccessException;\n    Pet findById(int id) throws DataAccessException;\n    void save(Pet pet) throws DataAccessException;\n    Collection<Pet> findAll() throws DataAccessException;\n    void delete(Pet pet) throws DataAccessException;\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\repository\PetTypeRepository.java","","PetTypeRepository","{\n    PetType findById(int id) throws DataAccessException;\n    PetType findByName(String name) throws DataAccessException;\n    Collection<PetType> findAll() throws DataAccessException;\n    void save(PetType petType) throws DataAccessException;\n    void delete(PetType petType) throws DataAccessException;\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\repository\SpecialtyRepository.java","","SpecialtyRepository","{\n    Specialty findById(int id) throws DataAccessException;\n    List<Specialty> findSpecialtiesByNameIn(Set<String> names);\n    Collection<Specialty> findAll() throws DataAccessException;\n    void save(Specialty specialty) throws DataAccessException;\n    void delete(Specialty specialty) throws DataAccessException;\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\repository\UserRepository.java","","UserRepository","{\n    void save(User user) throws DataAccessException;\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\repository\VetRepository.java","","VetRepository","{\n    Collection<Vet> findAll() throws DataAccessException;\n    Vet findById(int id) throws DataAccessException;\n    void save(Vet vet) throws DataAccessException;\n    void delete(Vet vet) throws DataAccessException;\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\repository\VisitRepository.java","","VisitRepository","{\n    void save(Visit visit) throws DataAccessException;\n    List<Visit> findByPetId(Integer petId);\n    Visit findById(int id) throws DataAccessException;\n    Collection<Visit> findAll() throws DataAccessException;\n    void delete(Visit visit) throws DataAccessException;\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\repository\jdbc\JdbcOwnerRepositoryImpl.java","","JdbcOwnerRepositoryImpl","{\n    private NamedParameterJdbcTemplate namedParameterJdbcTemplate;\n    private SimpleJdbcInsert insertOwner;\n    public JdbcOwnerRepositoryImpl(DataSource dataSource);\n    @Override public Collection<Owner> findByLastName(String lastName) throws DataAccessException;\n    @Override public Owner findById(int id) throws DataAccessException;\n    public void loadPetsAndVisits(Owner owner);\n    @Override public void save(Owner owner) throws DataAccessException;\n    public Collection<PetType> getPetTypes() throws DataAccessException;\n    private void loadOwnersPetsAndVisits(List<Owner> owners);\n    @Override public Collection<Owner> findAll() throws DataAccessException;\n    @Override @Transactional public void delete(Owner owner) throws DataAccessException;\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\repository\jdbc\JdbcPet.java","","JdbcPet","{\n    private int typeId;\n    private int ownerId;\n    public int getTypeId();\n    public void setTypeId(int typeId);\n    public int getOwnerId();\n    public void setOwnerId(int ownerId);\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\repository\jdbc\JdbcPetRepositoryImpl.java","","JdbcPetRepositoryImpl","{\n    private NamedParameterJdbcTemplate namedParameterJdbcTemplate;\n    private SimpleJdbcInsert insertPet;\n    private OwnerRepository ownerRepository;\n    private VisitRepository visitRepository;\n    public JdbcPetRepositoryImpl(DataSource dataSource, OwnerRepository ownerRepository, VisitRepository visitRepository);\n    @Override public List<PetType> findPetTypes() throws DataAccessException;\n    @Override public Pet findById(int id) throws DataAccessException;\n    @Override public void save(Pet pet) throws DataAccessException;\n    private MapSqlParameterSource createPetParameterSource(Pet pet);\n    @Override public Collection<Pet> findAll() throws DataAccessException;\n    @Override public void delete(Pet pet) throws DataAccessException;\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\repository\jdbc\JdbcPetRowMapper.java","","JdbcPetRowMapper","{\n    @Override public JdbcPet mapRow(ResultSet rs, int rownum) throws SQLException;\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\repository\jdbc\JdbcPetTypeRepositoryImpl.java","","JdbcPetTypeRepositoryImpl","{\n    private NamedParameterJdbcTemplate namedParameterJdbcTemplate;\n    private SimpleJdbcInsert insertPetType;\n    public JdbcPetTypeRepositoryImpl(DataSource dataSource);\n    @Override public PetType findById(int id);\n    @Override public PetType findByName(String name) throws DataAccessException;\n    @Override public Collection<PetType> findAll() throws DataAccessException;\n    @Override public void save(PetType petType) throws DataAccessException;\n    @Override public void delete(PetType petType) throws DataAccessException;\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\repository\jdbc\JdbcPetVisitExtractor.java","","JdbcPetVisitExtractor","{\n    public JdbcPetVisitExtractor();\n    @Override protected Integer mapPrimaryKey(ResultSet rs) throws SQLException;\n    @Override protected Integer mapForeignKey(ResultSet rs) throws SQLException;\n    @Override protected void addChild(JdbcPet root, Visit child);\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\repository\jdbc\JdbcSpecialtyRepositoryImpl.java","","JdbcSpecialtyRepositoryImpl","{\n    private NamedParameterJdbcTemplate namedParameterJdbcTemplate;\n    private SimpleJdbcInsert insertSpecialty;\n    public JdbcSpecialtyRepositoryImpl(DataSource dataSource);\n    @Override public Specialty findById(int id);\n    @Override public List<Specialty> findSpecialtiesByNameIn(Set<String> names);\n    @Override public Collection<Specialty> findAll() throws DataAccessException;\n    @Override public void save(Specialty specialty) throws DataAccessException;\n    @Override public void delete(Specialty specialty) throws DataAccessException;\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\repository\jdbc\JdbcUserRepositoryImpl.java","","JdbcUserRepositoryImpl","{\n    private NamedParameterJdbcTemplate namedParameterJdbcTemplate;\n    private SimpleJdbcInsert insertUser;\n    public JdbcUserRepositoryImpl(DataSource dataSource);\n    @Override public void save(User user) throws DataAccessException;\n    private User getByUsername(String username);\n    private void updateUserRoles(User user);\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\repository\jdbc\JdbcVetRepositoryImpl.java","","JdbcVetRepositoryImpl","{\n    private JdbcTemplate jdbcTemplate;\n    private NamedParameterJdbcTemplate namedParameterJdbcTemplate;\n    private SimpleJdbcInsert insertVet;\n    public JdbcVetRepositoryImpl(DataSource dataSource, JdbcTemplate jdbcTemplate);\n    @Override public Collection<Vet> findAll() throws DataAccessException;\n    @Override public Vet findById(int id) throws DataAccessException;\n    @Override public void save(Vet vet) throws DataAccessException;\n    @Override public void delete(Vet vet) throws DataAccessException;\n    private void updateVetSpecialties(Vet vet) throws DataAccessException;\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\repository\jdbc\JdbcVisitRepositoryImpl.java","","JdbcVisitRepositoryImpl","{\n    protected SimpleJdbcInsert insertVisit;\n    private NamedParameterJdbcTemplate namedParameterJdbcTemplate;\n    public JdbcVisitRepositoryImpl(DataSource dataSource);\n    protected MapSqlParameterSource createVisitParameterSource(Visit visit);\n    @Override public List<Visit> findByPetId(Integer petId);\n    @Override public Visit findById(int id) throws DataAccessException;\n    @Override public Collection<Visit> findAll() throws DataAccessException;\n    @Override public void save(Visit visit) throws DataAccessException;\n    @Override public void delete(Visit visit) throws DataAccessException;\n    // Nested class: JdbcVisitRowMapperExt\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\repository\jdbc\JdbcVisitRepositoryImpl.java","","JdbcVisitRowMapperExt","{\n    @Override public Visit mapRow(ResultSet rs, int rowNum) throws SQLException;\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\repository\jdbc\JdbcVisitRowMapper.java","","JdbcVisitRowMapper","{\n    @Override public Visit mapRow(ResultSet rs, int row) throws SQLException;\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\repository\jpa\JpaOwnerRepositoryImpl.java","","JpaOwnerRepositoryImpl","{\n    @PersistenceContext\n    private EntityManager em;\n    @SuppressWarnings(""unchecked"") public Collection<Owner> findByLastName(String lastName);\n    @Override public Owner findById(int id);\n    @Override public void save(Owner owner);\n    @SuppressWarnings(""unchecked"") @Override public Collection<Owner> findAll() throws DataAccessException;\n    @Override public void delete(Owner owner) throws DataAccessException;\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\repository\jpa\JpaPetRepositoryImpl.java","","JpaPetRepositoryImpl","{\n    @PersistenceContext\n    private EntityManager em;\n    @Override @SuppressWarnings(""unchecked"") public List<PetType> findPetTypes();\n    @Override public Pet findById(int id);\n    @Override public void save(Pet pet);\n    @SuppressWarnings(""unchecked"") @Override public Collection<Pet> findAll() throws DataAccessException;\n    @Override public void delete(Pet pet) throws DataAccessException;\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\repository\jpa\JpaPetTypeRepositoryImpl.java","","JpaPetTypeRepositoryImpl","{\n    @PersistenceContext\n    private EntityManager em;\n    @Override public PetType findById(int id);\n    @Override public PetType findByName(String name) throws DataAccessException;\n    @SuppressWarnings(""unchecked"") @Override public Collection<PetType> findAll() throws DataAccessException;\n    @Override public void save(PetType petType) throws DataAccessException;\n    @SuppressWarnings(""unchecked"") @Override public void delete(PetType petType) throws DataAccessException;\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\repository\jpa\JpaSpecialtyRepositoryImpl.java","","JpaSpecialtyRepositoryImpl","{\n    @PersistenceContext\n    private EntityManager em;\n    @Override public Specialty findById(int id);\n    @Override public List<Specialty> findSpecialtiesByNameIn(Set<String> names);\n    @SuppressWarnings(""unchecked"") @Override public Collection<Specialty> findAll() throws DataAccessException;\n    @Override public void save(Specialty specialty) throws DataAccessException;\n    @Override public void delete(Specialty specialty) throws DataAccessException;\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\repository\jpa\JpaUserRepositoryImpl.java","","JpaUserRepositoryImpl","{\n    @PersistenceContext\n    private EntityManager em;\n    @Override public void save(User user) throws DataAccessException;\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\repository\jpa\JpaVetRepositoryImpl.java","","JpaVetRepositoryImpl","{\n    @PersistenceContext\n    private EntityManager em;\n    @Override public Vet findById(int id) throws DataAccessException;\n    @SuppressWarnings(""unchecked"") @Override public Collection<Vet> findAll() throws DataAccessException;\n    @Override public void save(Vet vet) throws DataAccessException;\n    @Override public void delete(Vet vet) throws DataAccessException;\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\repository\jpa\JpaVisitRepositoryImpl.java","","JpaVisitRepositoryImpl","{\n    @PersistenceContext\n    private EntityManager em;\n    @Override public void save(Visit visit);\n    @Override @SuppressWarnings(""unchecked"") public List<Visit> findByPetId(Integer petId);\n    @Override public Visit findById(int id) throws DataAccessException;\n    @SuppressWarnings(""unchecked"") @Override public Collection<Visit> findAll() throws DataAccessException;\n    @Override public void delete(Visit visit) throws DataAccessException;\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\repository\springdatajpa\PetRepositoryOverride.java","","PetRepositoryOverride","{\n    void delete(Pet pet);\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\repository\springdatajpa\PetTypeRepositoryOverride.java","","PetTypeRepositoryOverride","{\n    void delete(PetType petType);\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\repository\springdatajpa\SpecialtyRepositoryOverride.java","","SpecialtyRepositoryOverride","{\n    void delete(Specialty specialty);\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\repository\springdatajpa\SpringDataOwnerRepository.java","","SpringDataOwnerRepository","{\n    @Override @Query(""SELECT DISTINCT owner FROM Owner owner left join fetch owner.pets WHERE owner.lastName LIKE :lastName%"") Collection<Owner> findByLastName(String lastName);\n    @Override @Query(""SELECT owner FROM Owner owner left join fetch owner.pets WHERE owner.id =:id"") Owner findById(int id);\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\repository\springdatajpa\SpringDataPetRepository.java","","SpringDataPetRepository","{\n    @Override @Query(""SELECT ptype FROM PetType ptype ORDER BY ptype.name"") List<PetType> findPetTypes() throws DataAccessException;\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\repository\springdatajpa\SpringDataPetRepositoryImpl.java","","SpringDataPetRepositoryImpl","{\n    @PersistenceContext\n    private EntityManager em;\n    @Override public void delete(Pet pet);\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\repository\springdatajpa\SpringDataPetTypeRepository.java","","SpringDataPetTypeRepository","{\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\repository\springdatajpa\SpringDataPetTypeRepositoryImpl.java","","SpringDataPetTypeRepositoryImpl","{\n    @PersistenceContext\n    private EntityManager em;\n    @SuppressWarnings(""unchecked"") @Override public void delete(PetType petType);\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\repository\springdatajpa\SpringDataSpecialtyRepository.java","","SpringDataSpecialtyRepository","{\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\repository\springdatajpa\SpringDataSpecialtyRepositoryImpl.java","","SpringDataSpecialtyRepositoryImpl","{\n    @PersistenceContext\n    private EntityManager em;\n    @Override public void delete(Specialty specialty);\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\repository\springdatajpa\SpringDataUserRepository.java","","SpringDataUserRepository","{\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\repository\springdatajpa\SpringDataVetRepository.java","","SpringDataVetRepository","{\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\repository\springdatajpa\SpringDataVisitRepository.java","","SpringDataVisitRepository","{\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\repository\springdatajpa\SpringDataVisitRepositoryImpl.java","","SpringDataVisitRepositoryImpl","{\n    @PersistenceContext\n    private EntityManager em;\n    @Override public void delete(Visit visit) throws DataAccessException;\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\repository\springdatajpa\VisitRepositoryOverride.java","","VisitRepositoryOverride","{\n    void delete(Visit visit);\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\rest\advice\ExceptionControllerAdvice.java","","ExceptionControllerAdvice","{\n    private ProblemDetail detailBuild(Exception ex, HttpStatus status, StringBuffer url);\n    @ExceptionHandler(Exception.class) @ResponseBody public ResponseEntity<ProblemDetail> handleGeneralException(Exception e, HttpServletRequest request);\n    @ExceptionHandler(DataIntegrityViolationException.class) @ResponseBody public ResponseEntity<ProblemDetail> handleDataIntegrityViolationException(DataIntegrityViolationException ex, HttpServletRequest request);\n    @ExceptionHandler(MethodArgumentNotValidException.class) @ResponseBody public ResponseEntity<ProblemDetail> handleMethodArgumentNotValidException(MethodArgumentNotValidException ex, HttpServletRequest request);\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\rest\controller\BindingErrorsResponse.java","","BindingErrorsResponse","{\n    public BindingErrorsResponse();\n    public BindingErrorsResponse(Integer id);\n    public BindingErrorsResponse(Integer pathId, Integer bodyId);\n    private void addBodyIdError(Integer bodyId, String message);\n    private final List<BindingError> bindingErrors = new ArrayList<BindingError>();\n    public void addError(BindingError bindingError);\n    public void addAllErrors(BindingResult bindingResult);\n    public String toJSON();\n    @Override public String toString();\n    // Nested class: BindingError\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\rest\controller\BindingErrorsResponse.java","","BindingError","{\n    private String objectName;\n    private String fieldName;\n    private String fieldValue;\n    private String errorMessage;\n    public BindingError();\n    protected void setObjectName(String objectName);\n    protected void setFieldName(String fieldName);\n    protected void setFieldValue(String fieldValue);\n    protected void setErrorMessage(String error_message);\n    @Override public String toString();\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\rest\controller\OwnerRestController.java","","OwnerRestController","{\n    private final ClinicService clinicService;\n    private final OwnerMapper ownerMapper;\n    private final PetMapper petMapper;\n    private final VisitMapper visitMapper;\n    public OwnerRestController(ClinicService clinicService, OwnerMapper ownerMapper, PetMapper petMapper, VisitMapper visitMapper);\n    @PreAuthorize(""hasRole(@roles.OWNER_ADMIN)"") @Override public ResponseEntity<List<OwnerDto>> listOwners(String lastName);\n    @PreAuthorize(""hasRole(@roles.OWNER_ADMIN)"") @Override public ResponseEntity<OwnerDto> getOwner(Integer ownerId);\n    @PreAuthorize(""hasRole(@roles.OWNER_ADMIN)"") @Override public ResponseEntity<OwnerDto> addOwner(OwnerFieldsDto ownerFieldsDto);\n    @PreAuthorize(""hasRole(@roles.OWNER_ADMIN)"") @Override public ResponseEntity<OwnerDto> updateOwner(Integer ownerId, OwnerFieldsDto ownerFieldsDto);\n    @PreAuthorize(""hasRole(@roles.OWNER_ADMIN)"") @Transactional @Override public ResponseEntity<OwnerDto> deleteOwner(Integer ownerId);\n    @PreAuthorize(""hasRole(@roles.OWNER_ADMIN)"") @Override public ResponseEntity<PetDto> addPetToOwner(Integer ownerId, PetFieldsDto petFieldsDto);\n    @PreAuthorize(""hasRole(@roles.OWNER_ADMIN)"") @Override public ResponseEntity<Void> updateOwnersPet(Integer ownerId, Integer petId, PetFieldsDto petFieldsDto);\n    @PreAuthorize(""hasRole(@roles.OWNER_ADMIN)"") @Override public ResponseEntity<VisitDto> addVisitToOwner(Integer ownerId, Integer petId, VisitFieldsDto visitFieldsDto);\n    @PreAuthorize(""hasRole(@roles.OWNER_ADMIN)"") @Override public ResponseEntity<PetDto> getOwnersPet(Integer ownerId, Integer petId);\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\rest\controller\PetRestController.java","","PetRestController","{\n    private final ClinicService clinicService;\n    private final PetMapper petMapper;\n    public PetRestController(ClinicService clinicService, PetMapper petMapper);\n    @PreAuthorize(""hasRole(@roles.OWNER_ADMIN)"") @Override public ResponseEntity<PetDto> getPet(Integer petId);\n    @PreAuthorize(""hasRole(@roles.OWNER_ADMIN)"") @Override public ResponseEntity<List<PetDto>> listPets();\n    @PreAuthorize(""hasRole(@roles.OWNER_ADMIN)"") @Override public ResponseEntity<PetDto> updatePet(Integer petId, PetDto petDto);\n    @PreAuthorize(""hasRole(@roles.OWNER_ADMIN)"") @Override public ResponseEntity<PetDto> deletePet(Integer petId);\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\rest\controller\PetTypeRestController.java","","PetTypeRestController","{\n    private final ClinicService clinicService;\n    private final PetTypeMapper petTypeMapper;\n    public PetTypeRestController(ClinicService clinicService, PetTypeMapper petTypeMapper);\n    @PreAuthorize(""hasAnyRole(@roles.OWNER_ADMIN, @roles.VET_ADMIN)"") @Override public ResponseEntity<List<PetTypeDto>> listPetTypes();\n    @PreAuthorize(""hasAnyRole(@roles.OWNER_ADMIN, @roles.VET_ADMIN)"") @Override public ResponseEntity<PetTypeDto> getPetType(Integer petTypeId);\n    @PreAuthorize(""hasRole(@roles.VET_ADMIN)"") @Override public ResponseEntity<PetTypeDto> addPetType(PetTypeFieldsDto petTypeFieldsDto);\n    @PreAuthorize(""hasRole(@roles.VET_ADMIN)"") @Override public ResponseEntity<PetTypeDto> updatePetType(Integer petTypeId, PetTypeDto petTypeDto);\n    @PreAuthorize(""hasRole(@roles.VET_ADMIN)"") @Transactional @Override public ResponseEntity<PetTypeDto> deletePetType(Integer petTypeId);\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\rest\controller\RootRestController.java","","RootRestController","{\n    @Value(""#{servletContext.contextPath}"")\n    private String servletContextPath;\n    @RequestMapping(value = ""/"") public void redirectToSwagger(HttpServletResponse response) throws IOException;\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\rest\controller\SpecialtyRestController.java","","SpecialtyRestController","{\n    private final ClinicService clinicService;\n    private final SpecialtyMapper specialtyMapper;\n    public SpecialtyRestController(ClinicService clinicService, SpecialtyMapper specialtyMapper);\n    @PreAuthorize(""hasRole(@roles.VET_ADMIN)"") @Override public ResponseEntity<List<SpecialtyDto>> listSpecialties();\n    @PreAuthorize(""hasRole(@roles.VET_ADMIN)"") @Override public ResponseEntity<SpecialtyDto> getSpecialty(Integer specialtyId);\n    @PreAuthorize(""hasRole(@roles.VET_ADMIN)"") @Override public ResponseEntity<SpecialtyDto> addSpecialty(SpecialtyDto specialtyDto);\n    @PreAuthorize(""hasRole(@roles.VET_ADMIN)"") @Override public ResponseEntity<SpecialtyDto> updateSpecialty(Integer specialtyId, SpecialtyDto specialtyDto);\n    @PreAuthorize(""hasRole(@roles.VET_ADMIN)"") @Transactional @Override public ResponseEntity<SpecialtyDto> deleteSpecialty(Integer specialtyId);\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\rest\controller\UserRestController.java","","UserRestController","{\n    private final UserService userService;\n    private final UserMapper userMapper;\n    public UserRestController(UserService userService, UserMapper userMapper);\n    @PreAuthorize( ""hasRole(@roles.ADMIN)"" ) @Override public ResponseEntity<UserDto> addUser(UserDto userDto);\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\rest\controller\VetRestController.java","","VetRestController","{\n    private final ClinicService clinicService;\n    private final VetMapper vetMapper;\n    private final SpecialtyMapper specialtyMapper;\n    public VetRestController(ClinicService clinicService, VetMapper vetMapper, SpecialtyMapper specialtyMapper);\n    @PreAuthorize(""hasRole(@roles.VET_ADMIN)"") @Override public ResponseEntity<List<VetDto>> listVets();\n    @PreAuthorize(""hasRole(@roles.VET_ADMIN)"") @Override public ResponseEntity<VetDto> getVet(Integer vetId);\n    @PreAuthorize(""hasRole(@roles.VET_ADMIN)"") @Override public ResponseEntity<VetDto> addVet(VetDto vetDto);\n    @PreAuthorize(""hasRole(@roles.VET_ADMIN)"") @Override public ResponseEntity<VetDto> updateVet(Integer vetId, VetDto vetDto);\n    @PreAuthorize(""hasRole(@roles.VET_ADMIN)"") @Transactional @Override public ResponseEntity<VetDto> deleteVet(Integer vetId);\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\rest\controller\VisitRestController.java","","VisitRestController","{\n    private final ClinicService clinicService;\n    private final VisitMapper visitMapper;\n    public VisitRestController(ClinicService clinicService, VisitMapper visitMapper);\n    @PreAuthorize(""hasRole(@roles.OWNER_ADMIN)"") @Override public ResponseEntity<List<VisitDto>> listVisits();\n    @PreAuthorize(""hasRole(@roles.OWNER_ADMIN)"") @Override public ResponseEntity<VisitDto> getVisit(Integer visitId);\n    @PreAuthorize(""hasRole(@roles.OWNER_ADMIN)"") @Override public ResponseEntity<VisitDto> addVisit(VisitDto visitDto);\n    @PreAuthorize(""hasRole(@roles.OWNER_ADMIN)"") @Override public ResponseEntity<VisitDto> updateVisit(Integer visitId, VisitFieldsDto visitDto);\n    @PreAuthorize(""hasRole(@roles.OWNER_ADMIN)"") @Transactional @Override public ResponseEntity<VisitDto> deleteVisit(Integer visitId);\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\security\BasicAuthenticationConfig.java","","BasicAuthenticationConfig","{\n    @Autowired\n    private DataSource dataSource;\n    @Bean public PasswordEncoder passwordEncoder();\n    @Bean public SecurityFilterChain filterChain(HttpSecurity http) throws Exception;\n    @Autowired public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception;\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\security\DisableSecurityConfig.java","","DisableSecurityConfig","{\n    @Bean public SecurityFilterChain filterChain(HttpSecurity http) throws Exception;\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\security\Roles.java","","Roles","{\n    public final String OWNER_ADMIN = ""ROLE_OWNER_ADMIN"";\n    public final String VET_ADMIN = ""ROLE_VET_ADMIN"";\n    public final String ADMIN = ""ROLE_ADMIN"";\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\service\ClinicService.java","","ClinicService","{\n    Pet findPetById(int id) throws DataAccessException;\n    Collection<Pet> findAllPets() throws DataAccessException;\n    void savePet(Pet pet) throws DataAccessException;\n    void deletePet(Pet pet) throws DataAccessException;\n    Collection<Visit> findVisitsByPetId(int petId);\n    Visit findVisitById(int visitId) throws DataAccessException;\n    Collection<Visit> findAllVisits() throws DataAccessException;\n    void saveVisit(Visit visit) throws DataAccessException;\n    void deleteVisit(Visit visit) throws DataAccessException;\n    Vet findVetById(int id) throws DataAccessException;\n    Collection<Vet> findVets() throws DataAccessException;\n    Collection<Vet> findAllVets() throws DataAccessException;\n    void saveVet(Vet vet) throws DataAccessException;\n    void deleteVet(Vet vet) throws DataAccessException;\n    Owner findOwnerById(int id) throws DataAccessException;\n    Collection<Owner> findAllOwners() throws DataAccessException;\n    void saveOwner(Owner owner) throws DataAccessException;\n    void deleteOwner(Owner owner) throws DataAccessException;\n    Collection<Owner> findOwnerByLastName(String lastName) throws DataAccessException;\n    PetType findPetTypeById(int petTypeId);\n    Collection<PetType> findAllPetTypes() throws DataAccessException;\n    Collection<PetType> findPetTypes() throws DataAccessException;\n    void savePetType(PetType petType) throws DataAccessException;\n    void deletePetType(PetType petType) throws DataAccessException;\n    Specialty findSpecialtyById(int specialtyId);\n    Collection<Specialty> findAllSpecialties() throws DataAccessException;\n    void saveSpecialty(Specialty specialty) throws DataAccessException;\n    void deleteSpecialty(Specialty specialty) throws DataAccessException;\n    List<Specialty> findSpecialtiesByNameIn(Set<String> names) throws DataAccessException;\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\service\ClinicServiceImpl.java","","ClinicServiceImpl","{\n    private final PetRepository petRepository;\n    private final VetRepository vetRepository;\n    private final OwnerRepository ownerRepository;\n    private final VisitRepository visitRepository;\n    private final SpecialtyRepository specialtyRepository;\n    private final PetTypeRepository petTypeRepository;\n    public ClinicServiceImpl(PetRepository petRepository, VetRepository vetRepository, OwnerRepository ownerRepository, VisitRepository visitRepository, SpecialtyRepository specialtyRepository, PetTypeRepository petTypeRepository);\n    @Override @Transactional(readOnly = true) public Collection<Pet> findAllPets() throws DataAccessException;\n    @Override @Transactional public void deletePet(Pet pet) throws DataAccessException;\n    @Override @Transactional(readOnly = true) public Visit findVisitById(int visitId) throws DataAccessException;\n    @Override @Transactional(readOnly = true) public Collection<Visit> findAllVisits() throws DataAccessException;\n    @Override @Transactional public void deleteVisit(Visit visit) throws DataAccessException;\n    @Override @Transactional(readOnly = true) public Vet findVetById(int id) throws DataAccessException;\n    @Override @Transactional(readOnly = true) public Collection<Vet> findAllVets() throws DataAccessException;\n    @Override @Transactional public void saveVet(Vet vet) throws DataAccessException;\n    @Override @Transactional public void deleteVet(Vet vet) throws DataAccessException;\n    @Override @Transactional(readOnly = true) public Collection<Owner> findAllOwners() throws DataAccessException;\n    @Override @Transactional public void deleteOwner(Owner owner) throws DataAccessException;\n    @Override @Transactional(readOnly = true) public PetType findPetTypeById(int petTypeId);\n    @Override @Transactional(readOnly = true) public Collection<PetType> findAllPetTypes() throws DataAccessException;\n    @Override @Transactional public void savePetType(PetType petType) throws DataAccessException;\n    @Override @Transactional public void deletePetType(PetType petType) throws DataAccessException;\n    @Override @Transactional(readOnly = true) public Specialty findSpecialtyById(int specialtyId);\n    @Override @Transactional(readOnly = true) public Collection<Specialty> findAllSpecialties() throws DataAccessException;\n    @Override @Transactional public void saveSpecialty(Specialty specialty) throws DataAccessException;\n    @Override @Transactional public void deleteSpecialty(Specialty specialty) throws DataAccessException;\n    @Override @Transactional(readOnly = true) public Collection<PetType> findPetTypes() throws DataAccessException;\n    @Override @Transactional(readOnly = true) public Owner findOwnerById(int id) throws DataAccessException;\n    @Override @Transactional(readOnly = true) public Pet findPetById(int id) throws DataAccessException;\n    @Override @Transactional public void savePet(Pet pet) throws DataAccessException;\n    @Override @Transactional public void saveVisit(Visit visit) throws DataAccessException;\n    @Override @Transactional(readOnly = true) public Collection<Vet> findVets() throws DataAccessException;\n    @Override @Transactional public void saveOwner(Owner owner) throws DataAccessException;\n    @Override @Transactional(readOnly = true) public Collection<Owner> findOwnerByLastName(String lastName) throws DataAccessException;\n    @Override @Transactional(readOnly = true) public Collection<Visit> findVisitsByPetId(int petId);\n    @Override @Transactional(readOnly = true) public List<Specialty> findSpecialtiesByNameIn(Set<String> names);\n    private <T> T findEntityById(Supplier<T> supplier);\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\service\UserService.java","","UserService","{\n    void saveUser(User user);\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\service\UserServiceImpl.java","","UserServiceImpl","{\n    @Autowired\n    private UserRepository userRepository;\n    @Override @Transactional public void saveUser(User user);\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\util\CallMonitoringAspect.java","","CallMonitoringAspect","{\n    private boolean enabled = true;\n    private int callCount = 0;\n    private long accumulatedCallTime = 0;\n    @ManagedAttribute public boolean isEnabled();\n    @ManagedAttribute public void setEnabled(boolean enabled);\n    @ManagedOperation public void reset();\n    @ManagedAttribute public int getCallCount();\n    @ManagedAttribute public long getCallTime();\n    @Around(""within(@org.springframework.stereotype.Repository *)"") public Object invoke(ProceedingJoinPoint joinPoint) throws Throwable;\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\main\java\org\springframework\samples\petclinic\util\EntityUtils.java","","EntityUtils","{\n    public static <T extends BaseEntity> T getById(Collection<T> entities, Class<T> entityClass, int entityId) throws ObjectRetrievalFailureException;\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\test\java\org\springframework\samples\petclinic\SpringConfigTests.java","","SpringConfigTests","{\n    @Test void contextLoads();\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\test\java\org\springframework\samples\petclinic\model\ValidatorTests.java","","ValidatorTests","{\n    private Validator createValidator();\n    @Test void shouldNotValidateWhenFirstNameEmpty();\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\test\java\org\springframework\samples\petclinic\rest\controller\OwnerRestControllerTests.java","","OwnerRestControllerTests","{\n    @Autowired\n    private OwnerRestController ownerRestController;\n    @Autowired\n    private OwnerMapper ownerMapper;\n    @Autowired\n    private PetMapper petMapper;\n    @Autowired\n    private VisitMapper visitMapper;\n    @MockitoBean\n    private ClinicService clinicService;\n    private MockMvc mockMvc;\n    private List<OwnerDto> owners;\n    private List<PetDto> pets;\n    private List<VisitDto> visits;\n    @BeforeEach void initOwners();\n    private PetDto getTestPetWithIdAndName(OwnerDto owner, int id, String name);\n    private VisitDto getTestVisitForPet(PetDto pet, int id);\n    @Test @WithMockUser(roles = ""OWNER_ADMIN"") void testGetOwnerSuccess() throws Exception;\n    @Test @WithMockUser(roles = ""OWNER_ADMIN"") void testGetOwnerNotFound() throws Exception;\n    @Test @WithMockUser(roles = ""OWNER_ADMIN"") void testGetOwnersListSuccess() throws Exception;\n    @Test @WithMockUser(roles = ""OWNER_ADMIN"") void testGetOwnersListNotFound() throws Exception;\n    @Test @WithMockUser(roles = ""OWNER_ADMIN"") void testGetAllOwnersSuccess() throws Exception;\n    @Test @WithMockUser(roles = ""OWNER_ADMIN"") void testGetAllOwnersNotFound() throws Exception;\n    @Test @WithMockUser(roles = ""OWNER_ADMIN"") void testCreateOwnerSuccess() throws Exception;\n    @Test @WithMockUser(roles = ""OWNER_ADMIN"") void testCreateOwnerError() throws Exception;\n    @Test @WithMockUser(roles = ""OWNER_ADMIN"") void testUpdateOwnerSuccess() throws Exception;\n    @Test @WithMockUser(roles = ""OWNER_ADMIN"") void testUpdateOwnerSuccessNoBodyId() throws Exception;\n    @Test @WithMockUser(roles = ""OWNER_ADMIN"") void testUpdateOwnerError() throws Exception;\n    @Test @WithMockUser(roles = ""OWNER_ADMIN"") void testDeleteOwnerSuccess() throws Exception;\n    @Test @WithMockUser(roles = ""OWNER_ADMIN"") void testDeleteOwnerError() throws Exception;\n    @Test @WithMockUser(roles = ""OWNER_ADMIN"") void testCreatePetSuccess() throws Exception;\n    @Test @WithMockUser(roles = ""OWNER_ADMIN"") void testCreatePetError() throws Exception;\n    @Test @WithMockUser(roles = ""OWNER_ADMIN"") void testCreateVisitSuccess() throws Exception;\n    @Test @WithMockUser(roles = ""OWNER_ADMIN"") void testGetOwnerPetSuccess() throws Exception;\n    @Test @WithMockUser(roles = ""OWNER_ADMIN"") void testGetOwnersPetsWithOwnerNotFound() throws Exception;\n    @Test @WithMockUser(roles = ""OWNER_ADMIN"") void testGetOwnersPetsWithPetNotFound() throws Exception;\n    @Test @WithMockUser(roles = ""OWNER_ADMIN"") void testUpdateOwnersPetSuccess() throws Exception;\n    @Test @WithMockUser(roles = ""OWNER_ADMIN"") void testUpdateOwnersPetOwnerNotFound() throws Exception;\n    @Test @WithMockUser(roles = ""OWNER_ADMIN"") void testUpdateOwnersPetPetNotFound() throws Exception;\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\test\java\org\springframework\samples\petclinic\rest\controller\PetRestControllerTests.java","","PetRestControllerTests","{\n    @MockitoBean\n    protected ClinicService clinicService;\n    @Autowired\n    private PetRestController petRestController;\n    @Autowired\n    private PetMapper petMapper;\n    private MockMvc mockMvc;\n    private List<PetDto> pets;\n    @BeforeEach void initPets();\n    @Test @WithMockUser(roles = ""OWNER_ADMIN"") void testGetPetSuccess() throws Exception;\n    @Test @WithMockUser(roles = ""OWNER_ADMIN"") void testGetPetNotFound() throws Exception;\n    @Test @WithMockUser(roles = ""OWNER_ADMIN"") void testGetAllPetsSuccess() throws Exception;\n    @Test @WithMockUser(roles = ""OWNER_ADMIN"") void testGetAllPetsNotFound() throws Exception;\n    @Test @WithMockUser(roles = ""OWNER_ADMIN"") void testUpdatePetSuccess() throws Exception;\n    @Test @WithMockUser(roles = ""OWNER_ADMIN"") void testUpdatePetError() throws Exception;\n    @Test @WithMockUser(roles = ""OWNER_ADMIN"") void testDeletePetSuccess() throws Exception;\n    @Test @WithMockUser(roles = ""OWNER_ADMIN"") void testDeletePetError() throws Exception;\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\test\java\org\springframework\samples\petclinic\rest\controller\PetTypeRestControllerTests.java","","PetTypeRestControllerTests","{\n    @Autowired\n    private PetTypeRestController petTypeRestController;\n    @Autowired\n    private PetTypeMapper petTypeMapper;\n    @MockitoBean\n    private ClinicService clinicService;\n    private MockMvc mockMvc;\n    private List<PetType> petTypes;\n    @BeforeEach void initPetTypes();\n    @Test @WithMockUser(roles=""OWNER_ADMIN"") void testGetPetTypeSuccessAsOwnerAdmin() throws Exception;\n    @Test @WithMockUser(roles=""VET_ADMIN"") void testGetPetTypeSuccessAsVetAdmin() throws Exception;\n    @Test @WithMockUser(roles=""OWNER_ADMIN"") void testGetPetTypeNotFound() throws Exception;\n    @Test @WithMockUser(roles=""OWNER_ADMIN"") void testGetAllPetTypesSuccessAsOwnerAdmin() throws Exception;\n    @Test @WithMockUser(roles=""VET_ADMIN"") void testGetAllPetTypesSuccessAsVetAdmin() throws Exception;\n    @Test @WithMockUser(roles=""VET_ADMIN"") void testGetAllPetTypesNotFound() throws Exception;\n    @Test @WithMockUser(roles=""VET_ADMIN"") void testCreatePetTypeSuccess() throws Exception;\n    @Test @WithMockUser(roles=""VET_ADMIN"") void testCreatePetTypeError() throws Exception;\n    @Test @WithMockUser(roles=""VET_ADMIN"") void testUpdatePetTypeSuccess() throws Exception;\n    @Test @WithMockUser(roles=""VET_ADMIN"") void testUpdatePetTypeError() throws Exception;\n    @Test @WithMockUser(roles=""VET_ADMIN"") void testDeletePetTypeSuccess() throws Exception;\n    @Test @WithMockUser(roles=""VET_ADMIN"") void testDeletePetTypeError() throws Exception;\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\test\java\org\springframework\samples\petclinic\rest\controller\SpecialtyRestControllerTests.java","","SpecialtyRestControllerTests","{\n    @Autowired\n    private SpecialtyRestController specialtyRestController;\n    @Autowired\n    private SpecialtyMapper specialtyMapper;\n    @MockitoBean\n    private ClinicService clinicService;\n    private MockMvc mockMvc;\n    private List<Specialty> specialties;\n    @BeforeEach void initSpecialtys();\n    @Test @WithMockUser(roles=""VET_ADMIN"") void testGetSpecialtySuccess() throws Exception;\n    @Test @WithMockUser(roles=""VET_ADMIN"") void testGetSpecialtyNotFound() throws Exception;\n    @Test @WithMockUser(roles=""VET_ADMIN"") void testGetAllSpecialtysSuccess() throws Exception;\n    @Test @WithMockUser(roles=""VET_ADMIN"") void testGetAllSpecialtysNotFound() throws Exception;\n    @Test @WithMockUser(roles=""VET_ADMIN"") void testCreateSpecialtySuccess() throws Exception;\n    @Test @WithMockUser(roles=""VET_ADMIN"") void testCreateSpecialtyError() throws Exception;\n    @Test @WithMockUser(roles=""VET_ADMIN"") void testUpdateSpecialtySuccess() throws Exception;\n    @Test @WithMockUser(roles=""VET_ADMIN"") void testUpdateSpecialtyError() throws Exception;\n    @Test @WithMockUser(roles=""VET_ADMIN"") void testDeleteSpecialtySuccess() throws Exception;\n    @Test @WithMockUser(roles=""VET_ADMIN"") void testDeleteSpecialtyError() throws Exception;\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\test\java\org\springframework\samples\petclinic\rest\controller\UserRestControllerTests.java","","UserRestControllerTests","{\n    @Mock\n    private UserService userService;\n    @Autowired\n    private UserMapper userMapper;\n    @Autowired\n    private UserRestController userRestController;\n    private MockMvc mockMvc;\n    @BeforeEach void initVets();\n    @Test @WithMockUser(roles = ""ADMIN"") void testCreateUserSuccess() throws Exception;\n    @Test @WithMockUser(roles = ""ADMIN"") void testCreateUserError() throws Exception;\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\test\java\org\springframework\samples\petclinic\rest\controller\VetRestControllerTests.java","","VetRestControllerTests","{\n    @Autowired\n    private VetRestController vetRestController;\n    @Autowired\n    private VetMapper vetMapper;\n    @MockitoBean\n    private ClinicService clinicService;\n    private MockMvc mockMvc;\n    private List<Vet> vets;\n    @BeforeEach void initVets();\n    @Test @WithMockUser(roles=""VET_ADMIN"") void testGetVetSuccess() throws Exception;\n    @Test @WithMockUser(roles=""VET_ADMIN"") void testGetVetNotFound() throws Exception;\n    @Test @WithMockUser(roles=""VET_ADMIN"") void testGetAllVetsSuccess() throws Exception;\n    @Test @WithMockUser(roles=""VET_ADMIN"") void testGetAllVetsNotFound() throws Exception;\n    @Test @WithMockUser(roles=""VET_ADMIN"") void testCreateVetSuccess() throws Exception;\n    @Test @WithMockUser(roles=""VET_ADMIN"") void testCreateVetError() throws Exception;\n    @Test @WithMockUser(roles=""VET_ADMIN"") void testUpdateVetSuccess() throws Exception;\n    @Test @WithMockUser(roles=""VET_ADMIN"") void testUpdateVetError() throws Exception;\n    @Test @WithMockUser(roles=""VET_ADMIN"") void testDeleteVetSuccess() throws Exception;\n    @Test @WithMockUser(roles=""VET_ADMIN"") void testDeleteVetError() throws Exception;\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\test\java\org\springframework\samples\petclinic\rest\controller\VisitRestControllerTests.java","","VisitRestControllerTests","{\n    @Autowired\n    private VisitRestController visitRestController;\n    @MockitoBean\n    private ClinicService clinicService;\n    @Autowired\n    private VisitMapper visitMapper;\n    private MockMvc mockMvc;\n    private List<Visit> visits;\n    @BeforeEach void initVisits();\n    @Test @WithMockUser(roles=""OWNER_ADMIN"") void testGetVisitSuccess() throws Exception;\n    @Test @WithMockUser(roles=""OWNER_ADMIN"") void testGetVisitNotFound() throws Exception;\n    @Test @WithMockUser(roles=""OWNER_ADMIN"") void testGetAllVisitsSuccess() throws Exception;\n    @Test @WithMockUser(roles=""OWNER_ADMIN"") void testGetAllVisitsNotFound() throws Exception;\n    @Test @WithMockUser(roles=""OWNER_ADMIN"") void testCreateVisitSuccess() throws Exception;\n    @Test @WithMockUser(roles=""OWNER_ADMIN"") void testCreateVisitError() throws Exception;\n    @Test @WithMockUser(roles=""OWNER_ADMIN"") void testUpdateVisitSuccess() throws Exception;\n    @Test @WithMockUser(roles=""OWNER_ADMIN"") void testUpdateVisitError() throws Exception;\n    @Test @WithMockUser(roles=""OWNER_ADMIN"") void testDeleteVisitSuccess() throws Exception;\n    @Test @WithMockUser(roles=""OWNER_ADMIN"") void testDeleteVisitError() throws Exception;\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\test\java\org\springframework\samples\petclinic\service\clinicService\AbstractClinicServiceTests.java","","AbstractClinicServiceTests","{\n    @Autowired\n    protected ClinicService clinicService;\n    @Test void shouldFindOwnersByLastName();\n    @Test void shouldFindSingleOwnerWithPet();\n    @Test @Transactional void shouldInsertOwner();\n    @Test @Transactional void shouldUpdateOwner();\n    @Test void shouldFindPetWithCorrectId();\n    @Test @Transactional void shouldInsertPetIntoDatabaseAndGenerateId();\n    @Test @Transactional void shouldUpdatePetName() throws Exception;\n    @Test void shouldFindVets();\n    @Test @Transactional void shouldAddNewVisitForPet();\n    @Test void shouldFindVisitsByPetId() throws Exception;\n    @Test void shouldFindAllPets();\n    @Test @Transactional void shouldDeletePet();\n    @Test void shouldFindVisitDyId();\n    @Test void shouldFindAllVisits();\n    @Test @Transactional void shouldInsertVisit();\n    @Test @Transactional void shouldUpdateVisit();\n    @Test @Transactional void shouldDeleteVisit();\n    @Test void shouldFindVetDyId();\n    @Test @Transactional void shouldInsertVet();\n    @Test @Transactional void shouldUpdateVet();\n    @Test @Transactional void shouldDeleteVet();\n    @Test void shouldFindAllOwners();\n    @Test @Transactional void shouldDeleteOwner();\n    @Test void shouldFindPetTypeById();\n    @Test void shouldFindAllPetTypes();\n    @Test @Transactional void shouldInsertPetType();\n    @Test @Transactional void shouldUpdatePetType();\n    @Test @Transactional void shouldDeletePetType();\n    @Test void shouldFindSpecialtyById();\n    @Test void shouldFindAllSpecialtys();\n    @Test @Transactional void shouldInsertSpecialty();\n    @Test @Transactional void shouldUpdateSpecialty();\n    @Test @Transactional void shouldDeleteSpecialty();\n    @Test @Transactional void shouldFindSpecialtiesByNameIn();\n    void clearCache();\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\test\java\org\springframework\samples\petclinic\service\clinicService\ApplicationTestConfig.java","","ApplicationTestConfig","{\n    public ApplicationTestConfig();\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\test\java\org\springframework\samples\petclinic\service\clinicService\ClinicServiceJdbcTests.java","","ClinicServiceJdbcTests","{\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\test\java\org\springframework\samples\petclinic\service\clinicService\ClinicServiceJpaTests.java","","ClinicServiceJpaTests","{\n    @Autowired\n    EntityManager entityManager;\n    @Override void clearCache();\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\test\java\org\springframework\samples\petclinic\service\clinicService\ClinicServiceSpringDataJpaTests.java","","ClinicServiceSpringDataJpaTests","{\n    @Autowired\n    EntityManager entityManager;\n    @Override void clearCache();\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\test\java\org\springframework\samples\petclinic\service\userService\AbstractUserServiceTests.java","","AbstractUserServiceTests","{\n    @Autowired\n    private UserService userService;\n    @BeforeEach public void init();\n    @Test public void shouldAddUser() throws Exception;\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\test\java\org\springframework\samples\petclinic\service\userService\UserServiceJdbcTests.java","","UserServiceJdbcTests","{\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\test\java\org\springframework\samples\petclinic\service\userService\UserServiceJpaTests.java","","UserServiceJpaTests","{\n}"
"./javarepoparser/temp/spring-petclinic-rest\src\test\java\org\springframework\samples\petclinic\service\userService\UserServiceSpringDataJpaTests.java","","UserServiceSpringDataJpaTests","{\n}"
"./javarepoparser/temp/spring-petclinic-rest\target\generated-sources\annotations\org\springframework\samples\petclinic\mapper\OwnerMapperImpl.java","","OwnerMapperImpl","{\n    @Autowired\n    private PetMapper petMapper;\n    @Override public OwnerDto toOwnerDto(Owner owner);\n    @Override public Owner toOwner(OwnerDto ownerDto);\n    @Override public Owner toOwner(OwnerFieldsDto ownerDto);\n    @Override public List<OwnerDto> toOwnerDtoCollection(Collection<Owner> ownerCollection);\n    @Override public Collection<Owner> toOwners(Collection<OwnerDto> ownerDtos);\n    protected List<PetDto> petListToPetDtoList(List<Pet> list);\n    protected List<Pet> petDtoListToPetList(List<PetDto> list);\n}"
"./javarepoparser/temp/spring-petclinic-rest\target\generated-sources\annotations\org\springframework\samples\petclinic\mapper\PetMapperImpl.java","","PetMapperImpl","{\n    @Autowired\n    private VisitMapper visitMapper;\n    @Override public PetDto toPetDto(Pet pet);\n    @Override public Collection<PetDto> toPetsDto(Collection<Pet> pets);\n    @Override public Collection<Pet> toPets(Collection<PetDto> pets);\n    @Override public Pet toPet(PetDto petDto);\n    @Override public Pet toPet(PetFieldsDto petFieldsDto);\n    @Override public PetTypeDto toPetTypeDto(PetType petType);\n    @Override public PetType toPetType(PetTypeDto petTypeDto);\n    @Override public Collection<PetTypeDto> toPetTypeDtos(Collection<PetType> petTypes);\n    private Integer petOwnerId(Pet pet);\n    protected List<VisitDto> visitListToVisitDtoList(List<Visit> list);\n    protected Owner petDtoToOwner(PetDto petDto);\n    protected List<Visit> visitDtoListToVisitList(List<VisitDto> list);\n}"
"./javarepoparser/temp/spring-petclinic-rest\target\generated-sources\annotations\org\springframework\samples\petclinic\mapper\PetTypeMapperImpl.java","","PetTypeMapperImpl","{\n    @Override public PetType toPetType(PetTypeDto petTypeDto);\n    @Override public PetType toPetType(PetTypeFieldsDto petTypeFieldsDto);\n    @Override public PetTypeDto toPetTypeDto(PetType petType);\n    @Override public PetTypeFieldsDto toPetTypeFieldsDto(PetType petType);\n    @Override public List<PetTypeDto> toPetTypeDtos(Collection<PetType> petTypes);\n}"
"./javarepoparser/temp/spring-petclinic-rest\target\generated-sources\annotations\org\springframework\samples\petclinic\mapper\SpecialtyMapperImpl.java","","SpecialtyMapperImpl","{\n    @Override public Specialty toSpecialty(SpecialtyDto specialtyDto);\n    @Override public SpecialtyDto toSpecialtyDto(Specialty specialty);\n    @Override public Collection<SpecialtyDto> toSpecialtyDtos(Collection<Specialty> specialties);\n    @Override public Collection<Specialty> toSpecialtys(Collection<SpecialtyDto> specialties);\n}"
"./javarepoparser/temp/spring-petclinic-rest\target\generated-sources\annotations\org\springframework\samples\petclinic\mapper\UserMapperImpl.java","","UserMapperImpl","{\n    @Override public Role toRole(RoleDto roleDto);\n    @Override public RoleDto toRoleDto(Role role);\n    @Override public Collection<RoleDto> toRoleDtos(Collection<Role> roles);\n    @Override public User toUser(UserDto userDto);\n    @Override public UserDto toUserDto(User user);\n    @Override public Collection<Role> toRoles(Collection<RoleDto> roleDtos);\n    protected Set<Role> roleDtoListToRoleSet(List<RoleDto> list);\n    protected List<RoleDto> roleSetToRoleDtoList(Set<Role> set);\n}"
"./javarepoparser/temp/spring-petclinic-rest\target\generated-sources\annotations\org\springframework\samples\petclinic\mapper\VetMapperImpl.java","","VetMapperImpl","{\n    @Autowired\n    private SpecialtyMapper specialtyMapper;\n    @Override public Vet toVet(VetDto vetDto);\n    @Override public Vet toVet(VetFieldsDto vetFieldsDto);\n    @Override public VetDto toVetDto(Vet vet);\n    @Override public Collection<VetDto> toVetDtos(Collection<Vet> vets);\n    protected List<Specialty> specialtyDtoListToSpecialtyList(List<SpecialtyDto> list);\n    protected List<SpecialtyDto> specialtyListToSpecialtyDtoList(List<Specialty> list);\n}"
"./javarepoparser/temp/spring-petclinic-rest\target\generated-sources\annotations\org\springframework\samples\petclinic\mapper\VisitMapperImpl.java","","VisitMapperImpl","{\n    @Override public Visit toVisit(VisitDto visitDto);\n    @Override public Visit toVisit(VisitFieldsDto visitFieldsDto);\n    @Override public VisitDto toVisitDto(Visit visit);\n    @Override public Collection<VisitDto> toVisitsDto(Collection<Visit> visits);\n    protected Pet visitDtoToPet(VisitDto visitDto);\n    private Integer visitPetId(Visit visit);\n}"
"./javarepoparser/temp/spring-petclinic-rest\target\generated-sources\openapi\src\main\java\org\springframework\samples\petclinic\rest\api\ApiUtil.java","","ApiUtil","{\n    public static void setExampleResponse(NativeWebRequest req, String contentType, String example);\n}"
"./javarepoparser/temp/spring-petclinic-rest\target\generated-sources\openapi\src\main\java\org\springframework\samples\petclinic\rest\api\OopsApi.java","","OopsApi","{\n    default Optional<NativeWebRequest> getRequest();\n    @Operation(\n        operationId = ""failingRequest"",\n        summary = ""Always fails"",\n        description = ""Produces sample error response."",\n        tags = { ""failing"" },\n        responses = {\n            @ApiResponse(responseCode = ""200"", description = ""Never returned."", content = {\n                @Content(mediaType = ""text/plain"", schema = @Schema(implementation = String.class)),\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = String.class))\n            }),\n            @ApiResponse(responseCode = ""304"", description = ""Not modified.""),\n            @ApiResponse(responseCode = ""400"", description = ""Bad request."", content = {\n                @Content(mediaType = ""text/plain"", schema = @Schema(implementation = ProblemDetailDto.class)),\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            })\n        }\n    ) @RequestMapping(\n        method = RequestMethod.GET,\n        value = ""/oops"",\n        produces = { ""text/plain"", ""application/json"" }\n    ) default ResponseEntity<String> failingRequest();\n}"
"./javarepoparser/temp/spring-petclinic-rest\target\generated-sources\openapi\src\main\java\org\springframework\samples\petclinic\rest\api\OwnersApi.java","","OwnersApi","{\n    default Optional<NativeWebRequest> getRequest();\n    @Operation(\n        operationId = ""addOwner"",\n        summary = ""Adds a pet owner"",\n        description = ""Records the details of a new pet owner."",\n        tags = { ""owner"" },\n        responses = {\n            @ApiResponse(responseCode = ""201"", description = ""The pet owner was successfully added."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = OwnerDto.class))\n            }),\n            @ApiResponse(responseCode = ""400"", description = ""Bad request."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""500"", description = ""Server error."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            })\n        }\n    ) @RequestMapping(\n        method = RequestMethod.POST,\n        value = ""/owners"",\n        produces = { ""application/json"" },\n        consumes = { ""application/json"" }\n    ) default ResponseEntity<OwnerDto> addOwner(OwnerFieldsDto ownerFieldsDto);\n    @Operation(\n        operationId = ""addPetToOwner"",\n        summary = ""Adds a pet to an owner"",\n        description = ""Records the details of a new pet."",\n        tags = { ""pet"" },\n        responses = {\n            @ApiResponse(responseCode = ""201"", description = ""The pet was successfully added."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = PetDto.class))\n            }),\n            @ApiResponse(responseCode = ""400"", description = ""Bad request."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""404"", description = ""Pet or Owner not found."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""500"", description = ""Server error."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            })\n        }\n    ) @RequestMapping(\n        method = RequestMethod.POST,\n        value = ""/owners/{ownerId}/pets"",\n        produces = { ""application/json"" },\n        consumes = { ""application/json"" }\n    ) default ResponseEntity<PetDto> addPetToOwner(Integer ownerId, PetFieldsDto petFieldsDto);\n    @Operation(\n        operationId = ""addVisitToOwner"",\n        summary = ""Adds a vet visit"",\n        description = ""Records the details of a new vet visit."",\n        tags = { ""visit"" },\n        responses = {\n            @ApiResponse(responseCode = ""201"", description = ""The vet visit was successfully added."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = VisitDto.class))\n            }),\n            @ApiResponse(responseCode = ""400"", description = ""Bad request."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""404"", description = ""Pet not found for this owner."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""500"", description = ""Server error."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            })\n        }\n    ) @RequestMapping(\n        method = RequestMethod.POST,\n        value = ""/owners/{ownerId}/pets/{petId}/visits"",\n        produces = { ""application/json"" },\n        consumes = { ""application/json"" }\n    ) default ResponseEntity<VisitDto> addVisitToOwner(Integer ownerId, Integer petId, VisitFieldsDto visitFieldsDto);\n    @Operation(\n        operationId = ""deleteOwner"",\n        summary = ""Delete an owner by ID"",\n        description = ""Returns the owner or a 404 error."",\n        tags = { ""owner"" },\n        responses = {\n            @ApiResponse(responseCode = ""200"", description = ""Owner details found and returned."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = OwnerDto.class))\n            }),\n            @ApiResponse(responseCode = ""304"", description = ""Not modified.""),\n            @ApiResponse(responseCode = ""400"", description = ""Bad request."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""404"", description = ""Owner  not found."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""500"", description = ""Server error."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            })\n        }\n    ) @RequestMapping(\n        method = RequestMethod.DELETE,\n        value = ""/owners/{ownerId}"",\n        produces = { ""application/json"" }\n    ) default ResponseEntity<OwnerDto> deleteOwner(Integer ownerId);\n    @Operation(\n        operationId = ""getOwner"",\n        summary = ""Get a pet owner by ID"",\n        description = ""Returns the pet owner or a 404 error."",\n        tags = { ""owner"" },\n        responses = {\n            @ApiResponse(responseCode = ""200"", description = ""Owner details found and returned."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = OwnerDto.class))\n            }),\n            @ApiResponse(responseCode = ""304"", description = ""Not modified.""),\n            @ApiResponse(responseCode = ""400"", description = ""Bad request."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""404"", description = ""Owner not found."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""500"", description = ""Server error."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            })\n        }\n    ) @RequestMapping(\n        method = RequestMethod.GET,\n        value = ""/owners/{ownerId}"",\n        produces = { ""application/json"" }\n    ) default ResponseEntity<OwnerDto> getOwner(Integer ownerId);\n    @Operation(\n        operationId = ""getOwnersPet"",\n        summary = ""Get a pet by ID"",\n        description = ""Returns the pet or a 404 error."",\n        tags = { ""pet"" },\n        responses = {\n            @ApiResponse(responseCode = ""200"", description = ""Pet details found and returned."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = PetDto.class))\n            }),\n            @ApiResponse(responseCode = ""304"", description = ""Not modified.""),\n            @ApiResponse(responseCode = ""400"", description = ""Bad request."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""404"", description = ""Owner or pet not found."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""500"", description = ""Server error."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            })\n        }\n    ) @RequestMapping(\n        method = RequestMethod.GET,\n        value = ""/owners/{ownerId}/pets/{petId}"",\n        produces = { ""application/json"" }\n    ) default ResponseEntity<PetDto> getOwnersPet(Integer ownerId, Integer petId);\n    @Operation(\n        operationId = ""listOwners"",\n        summary = ""Lists pet owners"",\n        description = ""Returns an array of pet owners."",\n        tags = { ""owner"" },\n        responses = {\n            @ApiResponse(responseCode = ""200"", description = ""Owner details found and returned."", content = {\n                @Content(mediaType = ""application/json"", array = @ArraySchema(schema = @Schema(implementation = OwnerDto.class)))\n            }),\n            @ApiResponse(responseCode = ""304"", description = ""Not modified.""),\n            @ApiResponse(responseCode = ""500"", description = ""Server error."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            })\n        }\n    ) @RequestMapping(\n        method = RequestMethod.GET,\n        value = ""/owners"",\n        produces = { ""application/json"" }\n    ) default ResponseEntity<List<OwnerDto>> listOwners(String lastName);\n    @Operation(\n        operationId = ""updateOwner"",\n        summary = ""Update a pet owner's details"",\n        description = ""Updates the pet owner record with the specified details."",\n        tags = { ""owner"" },\n        responses = {\n            @ApiResponse(responseCode = ""200"", description = ""Update successful."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = OwnerDto.class))\n            }),\n            @ApiResponse(responseCode = ""400"", description = ""Bad request."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""404"", description = ""Owner not found."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""500"", description = ""Server error."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            })\n        }\n    ) @RequestMapping(\n        method = RequestMethod.PUT,\n        value = ""/owners/{ownerId}"",\n        produces = { ""application/json"" },\n        consumes = { ""application/json"" }\n    ) default ResponseEntity<OwnerDto> updateOwner(Integer ownerId, OwnerFieldsDto ownerFieldsDto);\n    @Operation(\n        operationId = ""updateOwnersPet"",\n        summary = ""Update a pet's details"",\n        description = ""Updates the pet record with the specified details."",\n        tags = { ""pet"" },\n        responses = {\n            @ApiResponse(responseCode = ""204"", description = ""Update successful.""),\n            @ApiResponse(responseCode = ""400"", description = ""Bad request."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""404"", description = ""Pet not found for this owner."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""500"", description = ""Server error."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            })\n        }\n    ) @RequestMapping(\n        method = RequestMethod.PUT,\n        value = ""/owners/{ownerId}/pets/{petId}"",\n        produces = { ""application/json"" },\n        consumes = { ""application/json"" }\n    ) default ResponseEntity<Void> updateOwnersPet(Integer ownerId, Integer petId, PetFieldsDto petFieldsDto);\n}"
"./javarepoparser/temp/spring-petclinic-rest\target\generated-sources\openapi\src\main\java\org\springframework\samples\petclinic\rest\api\PetsApi.java","","PetsApi","{\n    default Optional<NativeWebRequest> getRequest();\n    @Operation(\n        operationId = ""deletePet"",\n        summary = ""Delete a pet by ID"",\n        description = ""Returns the pet or a 404 error."",\n        tags = { ""pet"" },\n        responses = {\n            @ApiResponse(responseCode = ""200"", description = ""Pet details found and returned."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = PetDto.class))\n            }),\n            @ApiResponse(responseCode = ""304"", description = ""Not modified.""),\n            @ApiResponse(responseCode = ""400"", description = ""Bad request."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""404"", description = ""Pet not found."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""500"", description = ""Server error."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            })\n        }\n    ) @RequestMapping(\n        method = RequestMethod.DELETE,\n        value = ""/pets/{petId}"",\n        produces = { ""application/json"" }\n    ) default ResponseEntity<PetDto> deletePet(Integer petId);\n    @Operation(\n        operationId = ""getPet"",\n        summary = ""Get a pet by ID"",\n        description = ""Returns the pet  or a 404 error."",\n        tags = { ""pet"" },\n        responses = {\n            @ApiResponse(responseCode = ""200"", description = ""Pet details found and returned."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = PetDto.class))\n            }),\n            @ApiResponse(responseCode = ""304"", description = ""Not modified.""),\n            @ApiResponse(responseCode = ""400"", description = ""Bad request."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""404"", description = ""Pet not found."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""500"", description = ""Server error."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            })\n        }\n    ) @RequestMapping(\n        method = RequestMethod.GET,\n        value = ""/pets/{petId}"",\n        produces = { ""application/json"" }\n    ) default ResponseEntity<PetDto> getPet(Integer petId);\n    @Operation(\n        operationId = ""listPets"",\n        summary = ""Lists pet"",\n        description = ""Returns an array of pet ."",\n        tags = { ""pet"" },\n        responses = {\n            @ApiResponse(responseCode = ""200"", description = ""Pet types found and returned."", content = {\n                @Content(mediaType = ""application/json"", array = @ArraySchema(schema = @Schema(implementation = PetDto.class)))\n            }),\n            @ApiResponse(responseCode = ""304"", description = ""Not modified.""),\n            @ApiResponse(responseCode = ""500"", description = ""Server error."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            })\n        }\n    ) @RequestMapping(\n        method = RequestMethod.GET,\n        value = ""/pets"",\n        produces = { ""application/json"" }\n    ) default ResponseEntity<List<PetDto>> listPets();\n    @Operation(\n        operationId = ""updatePet"",\n        summary = ""Update a pet by ID"",\n        description = ""Returns the pet or a 404 error."",\n        tags = { ""pet"" },\n        responses = {\n            @ApiResponse(responseCode = ""200"", description = ""Pet details found and returned."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = PetDto.class))\n            }),\n            @ApiResponse(responseCode = ""304"", description = ""Not modified.""),\n            @ApiResponse(responseCode = ""400"", description = ""Bad request."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""404"", description = ""Pet not found."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""500"", description = ""Server error."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            })\n        }\n    ) @RequestMapping(\n        method = RequestMethod.PUT,\n        value = ""/pets/{petId}"",\n        produces = { ""application/json"" },\n        consumes = { ""application/json"" }\n    ) default ResponseEntity<PetDto> updatePet(Integer petId, PetDto petDto);\n}"
"./javarepoparser/temp/spring-petclinic-rest\target\generated-sources\openapi\src\main\java\org\springframework\samples\petclinic\rest\api\PettypesApi.java","","PettypesApi","{\n    default Optional<NativeWebRequest> getRequest();\n    @Operation(\n        operationId = ""addPetType"",\n        summary = ""Create a pet type"",\n        description = ""Creates a pet type ."",\n        tags = { ""pettypes"" },\n        responses = {\n            @ApiResponse(responseCode = ""200"", description = ""Pet type created successfully."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = PetTypeDto.class))\n            }),\n            @ApiResponse(responseCode = ""304"", description = ""Not modified.""),\n            @ApiResponse(responseCode = ""400"", description = ""Bad request."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""404"", description = ""Pet Type not found."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""500"", description = ""Server error."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            })\n        }\n    ) @RequestMapping(\n        method = RequestMethod.POST,\n        value = ""/pettypes"",\n        produces = { ""application/json"" },\n        consumes = { ""application/json"" }\n    ) default ResponseEntity<PetTypeDto> addPetType(PetTypeFieldsDto petTypeFieldsDto);\n    @Operation(\n        operationId = ""deletePetType"",\n        summary = ""Delete a pet type by ID"",\n        description = ""Returns the pet type or a 404 error."",\n        tags = { ""pettypes"" },\n        responses = {\n            @ApiResponse(responseCode = ""200"", description = ""Pet type details found and returned."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = PetTypeDto.class))\n            }),\n            @ApiResponse(responseCode = ""304"", description = ""Not modified.""),\n            @ApiResponse(responseCode = ""400"", description = ""Bad request."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""404"", description = ""Pet type not found."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""500"", description = ""Server error."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            })\n        }\n    ) @RequestMapping(\n        method = RequestMethod.DELETE,\n        value = ""/pettypes/{petTypeId}"",\n        produces = { ""application/json"" }\n    ) default ResponseEntity<PetTypeDto> deletePetType(Integer petTypeId);\n    @Operation(\n        operationId = ""getPetType"",\n        summary = ""Get a pet type by ID"",\n        description = ""Returns the pet type or a 404 error."",\n        tags = { ""pettypes"" },\n        responses = {\n            @ApiResponse(responseCode = ""200"", description = ""Pet type details found and returned."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = PetTypeDto.class))\n            }),\n            @ApiResponse(responseCode = ""304"", description = ""Not modified.""),\n            @ApiResponse(responseCode = ""400"", description = ""Bad request."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""404"", description = ""Pet Type not found."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""500"", description = ""Server error."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            })\n        }\n    ) @RequestMapping(\n        method = RequestMethod.GET,\n        value = ""/pettypes/{petTypeId}"",\n        produces = { ""application/json"" }\n    ) default ResponseEntity<PetTypeDto> getPetType(Integer petTypeId);\n    @Operation(\n        operationId = ""listPetTypes"",\n        summary = ""Lists pet types"",\n        description = ""Returns an array of pet types."",\n        tags = { ""pettypes"" },\n        responses = {\n            @ApiResponse(responseCode = ""200"", description = ""Pet types found and returned."", content = {\n                @Content(mediaType = ""application/json"", array = @ArraySchema(schema = @Schema(implementation = PetTypeDto.class)))\n            }),\n            @ApiResponse(responseCode = ""304"", description = ""Not modified.""),\n            @ApiResponse(responseCode = ""500"", description = ""Server error."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            })\n        }\n    ) @RequestMapping(\n        method = RequestMethod.GET,\n        value = ""/pettypes"",\n        produces = { ""application/json"" }\n    ) default ResponseEntity<List<PetTypeDto>> listPetTypes();\n    @Operation(\n        operationId = ""updatePetType"",\n        summary = ""Update a pet type by ID"",\n        description = ""Returns the pet type or a 404 error."",\n        tags = { ""pettypes"" },\n        responses = {\n            @ApiResponse(responseCode = ""200"", description = ""Pet type details found and returned."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = PetTypeDto.class))\n            }),\n            @ApiResponse(responseCode = ""304"", description = ""Not modified.""),\n            @ApiResponse(responseCode = ""400"", description = ""Bad request."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""404"", description = ""Pet Type not found."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""500"", description = ""Server error."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            })\n        }\n    ) @RequestMapping(\n        method = RequestMethod.PUT,\n        value = ""/pettypes/{petTypeId}"",\n        produces = { ""application/json"" },\n        consumes = { ""application/json"" }\n    ) default ResponseEntity<PetTypeDto> updatePetType(Integer petTypeId, PetTypeDto petTypeDto);\n}"
"./javarepoparser/temp/spring-petclinic-rest\target\generated-sources\openapi\src\main\java\org\springframework\samples\petclinic\rest\api\SpecialtiesApi.java","","SpecialtiesApi","{\n    default Optional<NativeWebRequest> getRequest();\n    @Operation(\n        operationId = ""addSpecialty"",\n        summary = ""Create a specialty"",\n        description = ""Creates a specialty ."",\n        tags = { ""specialty"" },\n        responses = {\n            @ApiResponse(responseCode = ""200"", description = ""Specialty created successfully."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = SpecialtyDto.class))\n            }),\n            @ApiResponse(responseCode = ""304"", description = ""Not modified.""),\n            @ApiResponse(responseCode = ""400"", description = ""Bad request."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""404"", description = ""Specialty not found."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""500"", description = ""Server error."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            })\n        }\n    ) @RequestMapping(\n        method = RequestMethod.POST,\n        value = ""/specialties"",\n        produces = { ""application/json"" },\n        consumes = { ""application/json"" }\n    ) default ResponseEntity<SpecialtyDto> addSpecialty(SpecialtyDto specialtyDto);\n    @Operation(\n        operationId = ""deleteSpecialty"",\n        summary = ""Delete a specialty by ID"",\n        description = ""Returns the specialty or a 404 error."",\n        tags = { ""specialty"" },\n        responses = {\n            @ApiResponse(responseCode = ""200"", description = ""Specialty details found and returned."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = SpecialtyDto.class))\n            }),\n            @ApiResponse(responseCode = ""304"", description = ""Not modified.""),\n            @ApiResponse(responseCode = ""400"", description = ""Bad request."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""404"", description = ""Specialty not found."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""500"", description = ""Server error."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            })\n        }\n    ) @RequestMapping(\n        method = RequestMethod.DELETE,\n        value = ""/specialties/{specialtyId}"",\n        produces = { ""application/json"" }\n    ) default ResponseEntity<SpecialtyDto> deleteSpecialty(Integer specialtyId);\n    @Operation(\n        operationId = ""getSpecialty"",\n        summary = ""Get a specialty by ID"",\n        description = ""Returns the specialty or a 404 error."",\n        tags = { ""specialty"" },\n        responses = {\n            @ApiResponse(responseCode = ""200"", description = ""Specialty details found and returned."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = SpecialtyDto.class))\n            }),\n            @ApiResponse(responseCode = ""304"", description = ""Not modified.""),\n            @ApiResponse(responseCode = ""400"", description = ""Bad request."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""404"", description = ""Specialty not found."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""500"", description = ""Server error."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            })\n        }\n    ) @RequestMapping(\n        method = RequestMethod.GET,\n        value = ""/specialties/{specialtyId}"",\n        produces = { ""application/json"" }\n    ) default ResponseEntity<SpecialtyDto> getSpecialty(Integer specialtyId);\n    @Operation(\n        operationId = ""listSpecialties"",\n        summary = ""Lists specialties"",\n        description = ""Returns an array of specialty ."",\n        tags = { ""specialty"" },\n        responses = {\n            @ApiResponse(responseCode = ""200"", description = ""Specialties found and returned."", content = {\n                @Content(mediaType = ""application/json"", array = @ArraySchema(schema = @Schema(implementation = SpecialtyDto.class)))\n            }),\n            @ApiResponse(responseCode = ""304"", description = ""Not modified.""),\n            @ApiResponse(responseCode = ""500"", description = ""Server error."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            })\n        }\n    ) @RequestMapping(\n        method = RequestMethod.GET,\n        value = ""/specialties"",\n        produces = { ""application/json"" }\n    ) default ResponseEntity<List<SpecialtyDto>> listSpecialties();\n    @Operation(\n        operationId = ""updateSpecialty"",\n        summary = ""Update a specialty by ID"",\n        description = ""Returns the specialty or a 404 error."",\n        tags = { ""specialty"" },\n        responses = {\n            @ApiResponse(responseCode = ""200"", description = ""Specialty details found and returned."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = SpecialtyDto.class))\n            }),\n            @ApiResponse(responseCode = ""304"", description = ""Not modified.""),\n            @ApiResponse(responseCode = ""400"", description = ""Bad request."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""404"", description = ""Specialty not found."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""500"", description = ""Server error."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            })\n        }\n    ) @RequestMapping(\n        method = RequestMethod.PUT,\n        value = ""/specialties/{specialtyId}"",\n        produces = { ""application/json"" },\n        consumes = { ""application/json"" }\n    ) default ResponseEntity<SpecialtyDto> updateSpecialty(Integer specialtyId, SpecialtyDto specialtyDto);\n}"
"./javarepoparser/temp/spring-petclinic-rest\target\generated-sources\openapi\src\main\java\org\springframework\samples\petclinic\rest\api\UsersApi.java","","UsersApi","{\n    default Optional<NativeWebRequest> getRequest();\n    @Operation(\n        operationId = ""addUser"",\n        summary = ""Create a user"",\n        description = ""Creates a user."",\n        tags = { ""user"" },\n        responses = {\n            @ApiResponse(responseCode = ""200"", description = ""User created successfully."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = UserDto.class))\n            }),\n            @ApiResponse(responseCode = ""304"", description = ""Not modified.""),\n            @ApiResponse(responseCode = ""400"", description = ""Bad request."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""404"", description = ""User not found."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""500"", description = ""Server error."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            })\n        }\n    ) @RequestMapping(\n        method = RequestMethod.POST,\n        value = ""/users"",\n        produces = { ""application/json"" },\n        consumes = { ""application/json"" }\n    ) default ResponseEntity<UserDto> addUser(UserDto userDto);\n}"
"./javarepoparser/temp/spring-petclinic-rest\target\generated-sources\openapi\src\main\java\org\springframework\samples\petclinic\rest\api\VetsApi.java","","VetsApi","{\n    default Optional<NativeWebRequest> getRequest();\n    @Operation(\n        operationId = ""addVet"",\n        summary = ""Create a Vet"",\n        description = ""Creates a vet ."",\n        tags = { ""vet"" },\n        responses = {\n            @ApiResponse(responseCode = ""200"", description = ""Vet created successfully."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = VetDto.class))\n            }),\n            @ApiResponse(responseCode = ""304"", description = ""Not modified.""),\n            @ApiResponse(responseCode = ""400"", description = ""Bad request."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""404"", description = ""Vet not found."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""500"", description = ""Server error."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            })\n        }\n    ) @RequestMapping(\n        method = RequestMethod.POST,\n        value = ""/vets"",\n        produces = { ""application/json"" },\n        consumes = { ""application/json"" }\n    ) default ResponseEntity<VetDto> addVet(VetDto vetDto);\n    @Operation(\n        operationId = ""deleteVet"",\n        summary = ""Delete a vet by ID"",\n        description = ""Returns the vet or a 404 error."",\n        tags = { ""vet"" },\n        responses = {\n            @ApiResponse(responseCode = ""200"", description = ""Vet details found and returned."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = VetDto.class))\n            }),\n            @ApiResponse(responseCode = ""304"", description = ""Not modified.""),\n            @ApiResponse(responseCode = ""400"", description = ""Bad request."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""404"", description = ""Vet not found."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""500"", description = ""Server error."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            })\n        }\n    ) @RequestMapping(\n        method = RequestMethod.DELETE,\n        value = ""/vets/{vetId}"",\n        produces = { ""application/json"" }\n    ) default ResponseEntity<VetDto> deleteVet(Integer vetId);\n    @Operation(\n        operationId = ""getVet"",\n        summary = ""Get a vet by ID"",\n        description = ""Returns the vet or a 404 error."",\n        tags = { ""vet"" },\n        responses = {\n            @ApiResponse(responseCode = ""200"", description = ""Vet details found and returned."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = VetDto.class))\n            }),\n            @ApiResponse(responseCode = ""304"", description = ""Not modified.""),\n            @ApiResponse(responseCode = ""400"", description = ""Bad request."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""404"", description = ""Vet not found."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""500"", description = ""Server error."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            })\n        }\n    ) @RequestMapping(\n        method = RequestMethod.GET,\n        value = ""/vets/{vetId}"",\n        produces = { ""application/json"" }\n    ) default ResponseEntity<VetDto> getVet(Integer vetId);\n    @Operation(\n        operationId = ""listVets"",\n        summary = ""Lists vets"",\n        description = ""Returns an array of vets."",\n        tags = { ""vet"" },\n        responses = {\n            @ApiResponse(responseCode = ""200"", description = ""Vets found and returned."", content = {\n                @Content(mediaType = ""application/json"", array = @ArraySchema(schema = @Schema(implementation = VetDto.class)))\n            }),\n            @ApiResponse(responseCode = ""304"", description = ""Not modified.""),\n            @ApiResponse(responseCode = ""500"", description = ""Server error."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            })\n        }\n    ) @RequestMapping(\n        method = RequestMethod.GET,\n        value = ""/vets"",\n        produces = { ""application/json"" }\n    ) default ResponseEntity<List<VetDto>> listVets();\n    @Operation(\n        operationId = ""updateVet"",\n        summary = ""Update a vet  by ID"",\n        description = ""Returns the vet or a 404 error."",\n        tags = { ""vet"" },\n        responses = {\n            @ApiResponse(responseCode = ""200"", description = ""Pet type details found and returned."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = VetDto.class))\n            }),\n            @ApiResponse(responseCode = ""304"", description = ""Not modified.""),\n            @ApiResponse(responseCode = ""400"", description = ""Bad request."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""404"", description = ""Vet not found."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""500"", description = ""Server error."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            })\n        }\n    ) @RequestMapping(\n        method = RequestMethod.PUT,\n        value = ""/vets/{vetId}"",\n        produces = { ""application/json"" },\n        consumes = { ""application/json"" }\n    ) default ResponseEntity<VetDto> updateVet(Integer vetId, VetDto vetDto);\n}"
"./javarepoparser/temp/spring-petclinic-rest\target\generated-sources\openapi\src\main\java\org\springframework\samples\petclinic\rest\api\VisitsApi.java","","VisitsApi","{\n    default Optional<NativeWebRequest> getRequest();\n    @Operation(\n        operationId = ""addVisit"",\n        summary = ""Create a visit"",\n        description = ""Creates a visit."",\n        tags = { ""visit"" },\n        responses = {\n            @ApiResponse(responseCode = ""200"", description = ""visit created successfully."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = VisitDto.class))\n            }),\n            @ApiResponse(responseCode = ""304"", description = ""Not modified.""),\n            @ApiResponse(responseCode = ""400"", description = ""Bad request."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""404"", description = ""Visit not found."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""500"", description = ""Server error."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            })\n        }\n    ) @RequestMapping(\n        method = RequestMethod.POST,\n        value = ""/visits"",\n        produces = { ""application/json"" },\n        consumes = { ""application/json"" }\n    ) default ResponseEntity<VisitDto> addVisit(VisitDto visitDto);\n    @Operation(\n        operationId = ""deleteVisit"",\n        summary = ""Delete a visit by ID"",\n        description = ""Returns the visit or a 404 error."",\n        tags = { ""visit"" },\n        responses = {\n            @ApiResponse(responseCode = ""200"", description = ""Visit details found and returned."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = VisitDto.class))\n            }),\n            @ApiResponse(responseCode = ""304"", description = ""Not modified.""),\n            @ApiResponse(responseCode = ""400"", description = ""Bad request."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""404"", description = ""Visit not found."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""500"", description = ""Server error."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            })\n        }\n    ) @RequestMapping(\n        method = RequestMethod.DELETE,\n        value = ""/visits/{visitId}"",\n        produces = { ""application/json"" }\n    ) default ResponseEntity<VisitDto> deleteVisit(Integer visitId);\n    @Operation(\n        operationId = ""getVisit"",\n        summary = ""Get a visit by ID"",\n        description = ""Returns the visit or a 404 error."",\n        tags = { ""visit"" },\n        responses = {\n            @ApiResponse(responseCode = ""200"", description = ""Visit details found and returned."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = VisitDto.class))\n            }),\n            @ApiResponse(responseCode = ""304"", description = ""Not modified.""),\n            @ApiResponse(responseCode = ""400"", description = ""Bad request."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""404"", description = ""Visit not found."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""500"", description = ""Server error."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            })\n        }\n    ) @RequestMapping(\n        method = RequestMethod.GET,\n        value = ""/visits/{visitId}"",\n        produces = { ""application/json"" }\n    ) default ResponseEntity<VisitDto> getVisit(Integer visitId);\n    @Operation(\n        operationId = ""listVisits"",\n        summary = ""Lists visits"",\n        description = ""Returns an array of visit ."",\n        tags = { ""visit"" },\n        responses = {\n            @ApiResponse(responseCode = ""200"", description = ""visits found and returned."", content = {\n                @Content(mediaType = ""application/json"", array = @ArraySchema(schema = @Schema(implementation = VisitDto.class)))\n            }),\n            @ApiResponse(responseCode = ""304"", description = ""Not modified.""),\n            @ApiResponse(responseCode = ""500"", description = ""Server error."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            })\n        }\n    ) @RequestMapping(\n        method = RequestMethod.GET,\n        value = ""/visits"",\n        produces = { ""application/json"" }\n    ) default ResponseEntity<List<VisitDto>> listVisits();\n    @Operation(\n        operationId = ""updateVisit"",\n        summary = ""Update a visit by ID"",\n        description = ""Returns the visit or a 404 error."",\n        tags = { ""visit"" },\n        responses = {\n            @ApiResponse(responseCode = ""200"", description = ""Visit details found and returned."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = VisitDto.class))\n            }),\n            @ApiResponse(responseCode = ""304"", description = ""Not modified.""),\n            @ApiResponse(responseCode = ""400"", description = ""Bad request."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""404"", description = ""Visit not found."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            }),\n            @ApiResponse(responseCode = ""500"", description = ""Server error."", content = {\n                @Content(mediaType = ""application/json"", schema = @Schema(implementation = ProblemDetailDto.class))\n            })\n        }\n    ) @RequestMapping(\n        method = RequestMethod.PUT,\n        value = ""/visits/{visitId}"",\n        produces = { ""application/json"" },\n        consumes = { ""application/json"" }\n    ) default ResponseEntity<VisitDto> updateVisit(Integer visitId, VisitFieldsDto visitFieldsDto);\n}"
"./javarepoparser/temp/spring-petclinic-rest\target\generated-sources\openapi\src\main\java\org\springframework\samples\petclinic\rest\dto\OwnerDto.java","","OwnerDto","{\n    private String firstName;\n    private String lastName;\n    private String address;\n    private String city;\n    private String telephone;\n    private @Nullable Integer id;\n    @Valid\n  private List<PetDto> pets = new ArrayList<>();\n    public OwnerDto();\n    public OwnerDto(String firstName, String lastName, String address, String city, String telephone, List<PetDto> pets);\n    public OwnerDto firstName(String firstName);\n    @NotNull @Pattern(regexp = ""^[\\p{L}]+([ '-][\\p{L}]+){0,2}$"") @Size(min = 1, max = 30) @Schema(name = ""firstName"", example = ""George"", description = ""The first name of the pet owner."", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""firstName"") public String getFirstName();\n    public void setFirstName(String firstName);\n    public OwnerDto lastName(String lastName);\n    @NotNull @Pattern(regexp = ""^[\\p{L}]+([ '-][\\p{L}]+){0,2}\\.?$"") @Size(min = 1, max = 30) @Schema(name = ""lastName"", example = ""Franklin"", description = ""The last name of the pet owner."", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""lastName"") public String getLastName();\n    public void setLastName(String lastName);\n    public OwnerDto address(String address);\n    @NotNull @Size(min = 1, max = 255) @Schema(name = ""address"", example = ""110 W. Liberty St."", description = ""The postal address of the pet owner."", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""address"") public String getAddress();\n    public void setAddress(String address);\n    public OwnerDto city(String city);\n    @NotNull @Size(min = 1, max = 80) @Schema(name = ""city"", example = ""Madison"", description = ""The city of the pet owner."", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""city"") public String getCity();\n    public void setCity(String city);\n    public OwnerDto telephone(String telephone);\n    @NotNull @Pattern(regexp = ""^[0-9]*$"") @Size(min = 1, max = 20) @Schema(name = ""telephone"", example = ""6085551023"", description = ""The telephone number of the pet owner."", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""telephone"") public String getTelephone();\n    public void setTelephone(String telephone);\n    public OwnerDto id(Integer id);\n    @Min(0) @Schema(name = ""id"", accessMode = Schema.AccessMode.READ_ONLY, example = ""1"", description = ""The ID of the pet owner."", requiredMode = Schema.RequiredMode.NOT_REQUIRED) @JsonProperty(""id"") public @Nullable Integer getId();\n    public void setId(Integer id);\n    public OwnerDto pets(List<PetDto> pets);\n    public OwnerDto addPetsItem(PetDto petsItem);\n    @Valid @Schema(name = ""pets"", accessMode = Schema.AccessMode.READ_ONLY, description = ""The pets owned by this individual including any booked vet visits."", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""pets"") public List<PetDto> getPets();\n    public void setPets(List<PetDto> pets);\n    @Override public boolean equals(Object o);\n    @Override public int hashCode();\n    @Override public String toString();\n    private String toIndentedString(Object o);\n}"
"./javarepoparser/temp/spring-petclinic-rest\target\generated-sources\openapi\src\main\java\org\springframework\samples\petclinic\rest\dto\OwnerFieldsDto.java","","OwnerFieldsDto","{\n    private String firstName;\n    private String lastName;\n    private String address;\n    private String city;\n    private String telephone;\n    public OwnerFieldsDto();\n    public OwnerFieldsDto(String firstName, String lastName, String address, String city, String telephone);\n    public OwnerFieldsDto firstName(String firstName);\n    @NotNull @Pattern(regexp = ""^[\\p{L}]+([ '-][\\p{L}]+){0,2}$"") @Size(min = 1, max = 30) @Schema(name = ""firstName"", example = ""George"", description = ""The first name of the pet owner."", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""firstName"") public String getFirstName();\n    public void setFirstName(String firstName);\n    public OwnerFieldsDto lastName(String lastName);\n    @NotNull @Pattern(regexp = ""^[\\p{L}]+([ '-][\\p{L}]+){0,2}\\.?$"") @Size(min = 1, max = 30) @Schema(name = ""lastName"", example = ""Franklin"", description = ""The last name of the pet owner."", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""lastName"") public String getLastName();\n    public void setLastName(String lastName);\n    public OwnerFieldsDto address(String address);\n    @NotNull @Size(min = 1, max = 255) @Schema(name = ""address"", example = ""110 W. Liberty St."", description = ""The postal address of the pet owner."", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""address"") public String getAddress();\n    public void setAddress(String address);\n    public OwnerFieldsDto city(String city);\n    @NotNull @Size(min = 1, max = 80) @Schema(name = ""city"", example = ""Madison"", description = ""The city of the pet owner."", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""city"") public String getCity();\n    public void setCity(String city);\n    public OwnerFieldsDto telephone(String telephone);\n    @NotNull @Pattern(regexp = ""^[0-9]*$"") @Size(min = 1, max = 20) @Schema(name = ""telephone"", example = ""6085551023"", description = ""The telephone number of the pet owner."", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""telephone"") public String getTelephone();\n    public void setTelephone(String telephone);\n    @Override public boolean equals(Object o);\n    @Override public int hashCode();\n    @Override public String toString();\n    private String toIndentedString(Object o);\n}"
"./javarepoparser/temp/spring-petclinic-rest\target\generated-sources\openapi\src\main\java\org\springframework\samples\petclinic\rest\dto\PetDto.java","","PetDto","{\n    private String name;\n    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE)\n  private LocalDate birthDate;\n    private PetTypeDto type;\n    private Integer id;\n    private @Nullable Integer ownerId;\n    @Valid\n  private List<VisitDto> visits = new ArrayList<>();\n    public PetDto();\n    public PetDto(String name, LocalDate birthDate, PetTypeDto type, Integer id, List<VisitDto> visits);\n    public PetDto name(String name);\n    @NotNull @Size(max = 30) @Schema(name = ""name"", example = ""Leo"", description = ""The name of the pet."", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""name"") public String getName();\n    public void setName(String name);\n    public PetDto birthDate(LocalDate birthDate);\n    @NotNull @Valid @Schema(name = ""birthDate"", example = ""2010-09-07"", description = ""The date of birth of the pet."", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""birthDate"") public LocalDate getBirthDate();\n    public void setBirthDate(LocalDate birthDate);\n    public PetDto type(PetTypeDto type);\n    @NotNull @Valid @Schema(name = ""type"", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""type"") public PetTypeDto getType();\n    public void setType(PetTypeDto type);\n    public PetDto id(Integer id);\n    @Min(0) @Schema(name = ""id"", accessMode = Schema.AccessMode.READ_ONLY, example = ""1"", description = ""The ID of the pet."", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""id"") public Integer getId();\n    public void setId(Integer id);\n    public PetDto ownerId(Integer ownerId);\n    @Min(0) @Schema(name = ""ownerId"", accessMode = Schema.AccessMode.READ_ONLY, example = ""1"", description = ""The ID of the pet's owner."", requiredMode = Schema.RequiredMode.NOT_REQUIRED) @JsonProperty(""ownerId"") public @Nullable Integer getOwnerId();\n    public void setOwnerId(Integer ownerId);\n    public PetDto visits(List<VisitDto> visits);\n    public PetDto addVisitsItem(VisitDto visitsItem);\n    @Valid @Schema(name = ""visits"", accessMode = Schema.AccessMode.READ_ONLY, description = ""Vet visit bookings for this pet."", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""visits"") public List<VisitDto> getVisits();\n    public void setVisits(List<VisitDto> visits);\n    @Override public boolean equals(Object o);\n    @Override public int hashCode();\n    @Override public String toString();\n    private String toIndentedString(Object o);\n}"
"./javarepoparser/temp/spring-petclinic-rest\target\generated-sources\openapi\src\main\java\org\springframework\samples\petclinic\rest\dto\PetFieldsDto.java","","PetFieldsDto","{\n    private String name;\n    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE)\n  private LocalDate birthDate;\n    private PetTypeDto type;\n    public PetFieldsDto();\n    public PetFieldsDto(String name, LocalDate birthDate, PetTypeDto type);\n    public PetFieldsDto name(String name);\n    @NotNull @Size(max = 30) @Schema(name = ""name"", example = ""Leo"", description = ""The name of the pet."", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""name"") public String getName();\n    public void setName(String name);\n    public PetFieldsDto birthDate(LocalDate birthDate);\n    @NotNull @Valid @Schema(name = ""birthDate"", example = ""2010-09-07"", description = ""The date of birth of the pet."", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""birthDate"") public LocalDate getBirthDate();\n    public void setBirthDate(LocalDate birthDate);\n    public PetFieldsDto type(PetTypeDto type);\n    @NotNull @Valid @Schema(name = ""type"", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""type"") public PetTypeDto getType();\n    public void setType(PetTypeDto type);\n    @Override public boolean equals(Object o);\n    @Override public int hashCode();\n    @Override public String toString();\n    private String toIndentedString(Object o);\n}"
"./javarepoparser/temp/spring-petclinic-rest\target\generated-sources\openapi\src\main\java\org\springframework\samples\petclinic\rest\dto\PetTypeDto.java","","PetTypeDto","{\n    private String name;\n    private Integer id;\n    public PetTypeDto();\n    public PetTypeDto(String name, Integer id);\n    public PetTypeDto name(String name);\n    @NotNull @Size(min = 1, max = 80) @Schema(name = ""name"", example = ""cat"", description = ""The name of the pet type."", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""name"") public String getName();\n    public void setName(String name);\n    public PetTypeDto id(Integer id);\n    @NotNull @Min(0) @Schema(name = ""id"", example = ""1"", description = ""The ID of the pet type."", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""id"") public Integer getId();\n    public void setId(Integer id);\n    @Override public boolean equals(Object o);\n    @Override public int hashCode();\n    @Override public String toString();\n    private String toIndentedString(Object o);\n}"
"./javarepoparser/temp/spring-petclinic-rest\target\generated-sources\openapi\src\main\java\org\springframework\samples\petclinic\rest\dto\PetTypeFieldsDto.java","","PetTypeFieldsDto","{\n    private String name;\n    public PetTypeFieldsDto();\n    public PetTypeFieldsDto(String name);\n    public PetTypeFieldsDto name(String name);\n    @NotNull @Size(min = 1, max = 80) @Schema(name = ""name"", example = ""cat"", description = ""The name of the pet type."", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""name"") public String getName();\n    public void setName(String name);\n    @Override public boolean equals(Object o);\n    @Override public int hashCode();\n    @Override public String toString();\n    private String toIndentedString(Object o);\n}"
"./javarepoparser/temp/spring-petclinic-rest\target\generated-sources\openapi\src\main\java\org\springframework\samples\petclinic\rest\dto\ProblemDetailDto.java","","ProblemDetailDto","{\n    private URI type;\n    private String title;\n    private Integer status;\n    private String detail;\n    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)\n  private OffsetDateTime timestamp;\n    @Valid\n  private List<ValidationMessageDto> schemaValidationErrors = new ArrayList<>();\n    public ProblemDetailDto();\n    public ProblemDetailDto(URI type, String title, Integer status, String detail, OffsetDateTime timestamp, List<ValidationMessageDto> schemaValidationErrors);\n    public ProblemDetailDto type(URI type);\n    @Valid @Schema(name = ""type"", accessMode = Schema.AccessMode.READ_ONLY, example = ""http://localhost:9966/petclinic/api/owner"", description = ""Full URL that originated the error response."", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""type"") public URI getType();\n    public void setType(URI type);\n    public ProblemDetailDto title(String title);\n    @Schema(name = ""title"", accessMode = Schema.AccessMode.READ_ONLY, example = ""NoResourceFoundException"", description = ""The short error title."", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""title"") public String getTitle();\n    public void setTitle(String title);\n    public ProblemDetailDto status(Integer status);\n    @Min(400) @Max(600) @Schema(name = ""status"", accessMode = Schema.AccessMode.READ_ONLY, example = ""500"", description = ""HTTP status code"", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""status"") public Integer getStatus();\n    public void setStatus(Integer status);\n    public ProblemDetailDto detail(String detail);\n    @Schema(name = ""detail"", accessMode = Schema.AccessMode.READ_ONLY, example = ""No static resource api/owner."", description = ""The long error message."", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""detail"") public String getDetail();\n    public void setDetail(String detail);\n    public ProblemDetailDto timestamp(OffsetDateTime timestamp);\n    @Valid @Schema(name = ""timestamp"", accessMode = Schema.AccessMode.READ_ONLY, example = ""2024-11-23T13:59:21.382040700Z"", description = ""The time the error occurred."", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""timestamp"") public OffsetDateTime getTimestamp();\n    public void setTimestamp(OffsetDateTime timestamp);\n    public ProblemDetailDto schemaValidationErrors(List<ValidationMessageDto> schemaValidationErrors);\n    public ProblemDetailDto addSchemaValidationErrorsItem(ValidationMessageDto schemaValidationErrorsItem);\n    @NotNull @Valid @Schema(name = ""schemaValidationErrors"", description = ""Validation errors against the OpenAPI schema."", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""schemaValidationErrors"") public List<ValidationMessageDto> getSchemaValidationErrors();\n    public void setSchemaValidationErrors(List<ValidationMessageDto> schemaValidationErrors);\n    @Override public boolean equals(Object o);\n    @Override public int hashCode();\n    @Override public String toString();\n    private String toIndentedString(Object o);\n}"
"./javarepoparser/temp/spring-petclinic-rest\target\generated-sources\openapi\src\main\java\org\springframework\samples\petclinic\rest\dto\RoleDto.java","","RoleDto","{\n    private String name;\n    public RoleDto();\n    public RoleDto(String name);\n    public RoleDto name(String name);\n    @NotNull @Size(min = 1, max = 80) @Schema(name = ""name"", example = ""admin"", description = ""The role's name"", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""name"") public String getName();\n    public void setName(String name);\n    @Override public boolean equals(Object o);\n    @Override public int hashCode();\n    @Override public String toString();\n    private String toIndentedString(Object o);\n}"
"./javarepoparser/temp/spring-petclinic-rest\target\generated-sources\openapi\src\main\java\org\springframework\samples\petclinic\rest\dto\SpecialtyDto.java","","SpecialtyDto","{\n    private Integer id;\n    private String name;\n    public SpecialtyDto();\n    public SpecialtyDto(Integer id, String name);\n    public SpecialtyDto id(Integer id);\n    @Min(0) @Schema(name = ""id"", accessMode = Schema.AccessMode.READ_ONLY, example = ""1"", description = ""The ID of the specialty."", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""id"") public Integer getId();\n    public void setId(Integer id);\n    public SpecialtyDto name(String name);\n    @NotNull @Size(min = 1, max = 80) @Schema(name = ""name"", example = ""radiology"", description = ""The name of the specialty."", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""name"") public String getName();\n    public void setName(String name);\n    @Override public boolean equals(Object o);\n    @Override public int hashCode();\n    @Override public String toString();\n    private String toIndentedString(Object o);\n}"
"./javarepoparser/temp/spring-petclinic-rest\target\generated-sources\openapi\src\main\java\org\springframework\samples\petclinic\rest\dto\UserDto.java","","UserDto","{\n    private String username;\n    private @Nullable String password;\n    private @Nullable Boolean enabled;\n    @Valid\n  private List<@Valid RoleDto> roles = new ArrayList<>();\n    public UserDto();\n    public UserDto(String username);\n    public UserDto username(String username);\n    @NotNull @Size(min = 1, max = 80) @Schema(name = ""username"", example = ""john.doe"", description = ""The username"", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""username"") public String getUsername();\n    public void setUsername(String username);\n    public UserDto password(String password);\n    @Size(min = 1, max = 80) @Schema(name = ""password"", example = ""1234abc"", description = ""The password"", requiredMode = Schema.RequiredMode.NOT_REQUIRED) @JsonProperty(""password"") public @Nullable String getPassword();\n    public void setPassword(String password);\n    public UserDto enabled(Boolean enabled);\n    @Schema(name = ""enabled"", example = ""true"", description = ""Indicates if the user is enabled"", requiredMode = Schema.RequiredMode.NOT_REQUIRED) @JsonProperty(""enabled"") public @Nullable Boolean getEnabled();\n    public void setEnabled(Boolean enabled);\n    public UserDto roles(List<@Valid RoleDto> roles);\n    public UserDto addRolesItem(RoleDto rolesItem);\n    @Valid @Schema(name = ""roles"", description = ""The roles of an user"", requiredMode = Schema.RequiredMode.NOT_REQUIRED) @JsonProperty(""roles"") public List<@Valid RoleDto> getRoles();\n    public void setRoles(List<@Valid RoleDto> roles);\n    @Override public boolean equals(Object o);\n    @Override public int hashCode();\n    @Override public String toString();\n    private String toIndentedString(Object o);\n}"
"./javarepoparser/temp/spring-petclinic-rest\target\generated-sources\openapi\src\main\java\org\springframework\samples\petclinic\rest\dto\ValidationMessageDto.java","","ValidationMessageDto","{\n    private String message;\n    public ValidationMessageDto();\n    public ValidationMessageDto(String message);\n    public ValidationMessageDto message(String message);\n    @Schema(name = ""message"", accessMode = Schema.AccessMode.READ_ONLY, example = ""[Path '/lastName'] Instance type (null) does not match any allowed primitive type (allowed: ['string'])"", description = ""The validation message."", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""message"") public String getMessage();\n    public void setMessage(String message);\n    private Map<String, Object> additionalProperties;\n    @JsonAnySetter public ValidationMessageDto putAdditionalProperty(String key, Object value);\n    @JsonAnyGetter public Map<String, Object> getAdditionalProperties();\n    public Object getAdditionalProperty(String key);\n    @Override public boolean equals(Object o);\n    @Override public int hashCode();\n    @Override public String toString();\n    private String toIndentedString(Object o);\n}"
"./javarepoparser/temp/spring-petclinic-rest\target\generated-sources\openapi\src\main\java\org\springframework\samples\petclinic\rest\dto\VetDto.java","","VetDto","{\n    private String firstName;\n    private String lastName;\n    @Valid\n  private List<@Valid SpecialtyDto> specialties = new ArrayList<>();\n    private Integer id;\n    public VetDto();\n    public VetDto(String firstName, String lastName, List<@Valid SpecialtyDto> specialties, Integer id);\n    public VetDto firstName(String firstName);\n    @NotNull @Pattern(regexp = ""^[\\p{L}]+([ '-][\\p{L}]+){0,2}$"") @Size(min = 1, max = 30) @Schema(name = ""firstName"", example = ""James"", description = ""The first name of the vet."", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""firstName"") public String getFirstName();\n    public void setFirstName(String firstName);\n    public VetDto lastName(String lastName);\n    @NotNull @Pattern(regexp = ""^[\\p{L}]+([ '-][\\p{L}]+){0,2}\\.?$"") @Size(min = 1, max = 30) @Schema(name = ""lastName"", example = ""Carter"", description = ""The last name of the vet."", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""lastName"") public String getLastName();\n    public void setLastName(String lastName);\n    public VetDto specialties(List<@Valid SpecialtyDto> specialties);\n    public VetDto addSpecialtiesItem(SpecialtyDto specialtiesItem);\n    @NotNull @Valid @Schema(name = ""specialties"", description = ""The specialties of the vet."", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""specialties"") public List<@Valid SpecialtyDto> getSpecialties();\n    public void setSpecialties(List<@Valid SpecialtyDto> specialties);\n    public VetDto id(Integer id);\n    @Min(0) @Schema(name = ""id"", accessMode = Schema.AccessMode.READ_ONLY, example = ""1"", description = ""The ID of the vet."", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""id"") public Integer getId();\n    public void setId(Integer id);\n    @Override public boolean equals(Object o);\n    @Override public int hashCode();\n    @Override public String toString();\n    private String toIndentedString(Object o);\n}"
"./javarepoparser/temp/spring-petclinic-rest\target\generated-sources\openapi\src\main\java\org\springframework\samples\petclinic\rest\dto\VetFieldsDto.java","","VetFieldsDto","{\n    private String firstName;\n    private String lastName;\n    @Valid\n  private List<@Valid SpecialtyDto> specialties = new ArrayList<>();\n    public VetFieldsDto();\n    public VetFieldsDto(String firstName, String lastName, List<@Valid SpecialtyDto> specialties);\n    public VetFieldsDto firstName(String firstName);\n    @NotNull @Pattern(regexp = ""^[\\p{L}]+([ '-][\\p{L}]+){0,2}$"") @Size(min = 1, max = 30) @Schema(name = ""firstName"", example = ""James"", description = ""The first name of the vet."", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""firstName"") public String getFirstName();\n    public void setFirstName(String firstName);\n    public VetFieldsDto lastName(String lastName);\n    @NotNull @Pattern(regexp = ""^[\\p{L}]+([ '-][\\p{L}]+){0,2}\\.?$"") @Size(min = 1, max = 30) @Schema(name = ""lastName"", example = ""Carter"", description = ""The last name of the vet."", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""lastName"") public String getLastName();\n    public void setLastName(String lastName);\n    public VetFieldsDto specialties(List<@Valid SpecialtyDto> specialties);\n    public VetFieldsDto addSpecialtiesItem(SpecialtyDto specialtiesItem);\n    @NotNull @Valid @Schema(name = ""specialties"", description = ""The specialties of the vet."", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""specialties"") public List<@Valid SpecialtyDto> getSpecialties();\n    public void setSpecialties(List<@Valid SpecialtyDto> specialties);\n    @Override public boolean equals(Object o);\n    @Override public int hashCode();\n    @Override public String toString();\n    private String toIndentedString(Object o);\n}"
"./javarepoparser/temp/spring-petclinic-rest\target\generated-sources\openapi\src\main\java\org\springframework\samples\petclinic\rest\dto\VisitDto.java","","VisitDto","{\n    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE)\n  private @Nullable LocalDate date;\n    private String description;\n    private Integer id;\n    private Integer petId;\n    public VisitDto();\n    public VisitDto(String description, Integer id, Integer petId);\n    public VisitDto date(LocalDate date);\n    @Valid @Schema(name = ""date"", example = ""2013-01-01"", description = ""The date of the visit."", requiredMode = Schema.RequiredMode.NOT_REQUIRED) @JsonProperty(""date"") public @Nullable LocalDate getDate();\n    public void setDate(LocalDate date);\n    public VisitDto description(String description);\n    @NotNull @Size(min = 1, max = 255) @Schema(name = ""description"", example = ""rabies shot"", description = ""The description for the visit."", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""description"") public String getDescription();\n    public void setDescription(String description);\n    public VisitDto id(Integer id);\n    @Min(0) @Schema(name = ""id"", accessMode = Schema.AccessMode.READ_ONLY, example = ""1"", description = ""The ID of the visit."", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""id"") public Integer getId();\n    public void setId(Integer id);\n    public VisitDto petId(Integer petId);\n    @NotNull @Min(0) @Schema(name = ""petId"", example = ""1"", description = ""The ID of the pet."", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""petId"") public Integer getPetId();\n    public void setPetId(Integer petId);\n    @Override public boolean equals(Object o);\n    @Override public int hashCode();\n    @Override public String toString();\n    private String toIndentedString(Object o);\n}"
"./javarepoparser/temp/spring-petclinic-rest\target\generated-sources\openapi\src\main\java\org\springframework\samples\petclinic\rest\dto\VisitFieldsDto.java","","VisitFieldsDto","{\n    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE)\n  private @Nullable LocalDate date;\n    private String description;\n    public VisitFieldsDto();\n    public VisitFieldsDto(String description);\n    public VisitFieldsDto date(LocalDate date);\n    @Valid @Schema(name = ""date"", example = ""2013-01-01"", description = ""The date of the visit."", requiredMode = Schema.RequiredMode.NOT_REQUIRED) @JsonProperty(""date"") public @Nullable LocalDate getDate();\n    public void setDate(LocalDate date);\n    public VisitFieldsDto description(String description);\n    @NotNull @Size(min = 1, max = 255) @Schema(name = ""description"", example = ""rabies shot"", description = ""The description for the visit."", requiredMode = Schema.RequiredMode.REQUIRED) @JsonProperty(""description"") public String getDescription();\n    public void setDescription(String description);\n    @Override public boolean equals(Object o);\n    @Override public int hashCode();\n    @Override public String toString();\n    private String toIndentedString(Object o);\n}"
